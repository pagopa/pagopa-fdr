microservice-chart:
  namespace: "fdr"
  nameOverride: ""
  fullnameOverride: ""
  image:
    repository: ghcr.io/pagopa/pagopa-fdr
    tag: 1.1.25-1-upd-helm
    pullPolicy: Always
  readinessProbe:
    httpGet:
      path: /q/health/ready
      port: 8080
    initialDelaySeconds: 10
    failureThreshold: 10
    periodSeconds: 5
  livenessProbe:
    httpGet:
      path: /q/health/live
      port: 8080
    initialDelaySeconds: 10
    failureThreshold: 10
    periodSeconds: 5
  envConfig:
    APP_ENVIRONMENT: "uat"
    TZ: "Europe/Rome"
    OTEL_ENDPOINT: "http://otel-collector.elastic-system.svc.cluster.local:4317"
    QUARKUS_OTEL_RESOURCE_ATTRIBUTES: "deployment.environment=uat"
    QUARKUS_OTEL_SERVICE_NAME: "pagopa-fdr"
    LOG_LEVEL: "INFO"
    ADAPTER_API_CONFIG_CACHE_URL: "https://api.uat.platform.pagopa.it/api-config-cache/p/v1"
    ADAPTER_API_CONFIG_CACHE_CRON: "0 */1 * * * ?"
    BLOB_RE_CONTAINER_NAME: "re-payload"
    DATASOURCE_URL: "jdbc:postgresql://fdr-db.u.internal.postgresql.pagopa.it:6432/fdr3?sslmode=require&prepareThreshold=0"
    DATASOURCE_USERNAME: "fdr3"
    DATASOURCE_POOL_SIZE: "50"
    SCHEDULE_HISTORY_SIZE: "100"
    SCHEDULE_HISTORY_RETRIES: "3"
  envFieldRef:
    APP_NAME: "metadata.labels['app.kubernetes.io/instance']"
    APP_VERSION: "metadata.labels['app.kubernetes.io/version']"
  secretProvider:
    create: true
    envSecrets:
      ADAPTER_API_CONFIG_CACHE_API_KEY: "api-config-cache-subscription-key-string"
      OTEL_AUTH_BEARER: "otel-auth-bearer"
      DATASOURCE_PASSWORD: "db-fdr3-password"
      BLOB_FDR_CONNECTION_STRING: "fdr-sa-connection-string"
      #BLOB_RE_CONNECTION_STRING: "fdr-re-sa-connection-string"
    keyvault:
      name: "pagopa-u-fdr-kv"
      tenantId: "7788edaf-0346-4068-9d79-c868aed15b3d"
  tmpVolumeMount:
    create: true
  resources:
    requests:
      memory: "2Gi"
      cpu: "400m"
    limits:
      memory: "3Gi"
      cpu: "800m"
  autoscaling:
    enable: true
    minReplica: 1
    maxReplica: 5
    pollingInterval: 10 # seconds
    cooldownPeriod: 50 # seconds
    triggers:
      - type: cpu
        metadata:
          type: Utilization
          value: "75"
      - type: memory
        metadata:
          type: Utilization
          value: "75"
  affinity:
    nodeAffinity:
      requiredDuringSchedulingIgnoredDuringExecution:
        nodeSelectorTerms:
          - matchExpressions:
              - key: node_type
                operator: In
                values:
                  - user
  serviceAccount:
    name: "fdr-workload-identity"
  azure:
    workloadIdentityClientId: <workload-identity-client-id-set-automatically-by-gha>
  serviceMonitor:
    create: true
    endpoints:
      - interval: 5s
        targetPort: 8080
        path: /q/metrics
  service:
    create: true
  ingress:
    create: true
    host: "weuuat.fdr.internal.uat.platform.pagopa.it"
    path: /pagopa-fdr-service(/|$)(.*)
    # currently set ingress timeout to 50m, until async handling will be introduced
    annotations:
      nginx.ingress.kubernetes.io/proxy-connect-timeout: "3000"
      nginx.ingress.kubernetes.io/proxy-read-timeout: "3000"
      nginx.ingress.kubernetes.io/proxy-send-timeout: "3000"
      nginx.ingress.kubernetes.io/send_timeout: "3000"
  canaryDelivery:
    create: false
