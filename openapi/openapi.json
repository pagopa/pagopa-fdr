{
  "openapi": "3.1.0",
  "tags": [
    {
      "name": "Info",
      "description": "Info operations"
    },
    {
      "name": "Internal Operations",
      "description": "APIs for internal operations, used for hidden processes in FdR ecosystem"
    },
    {
      "name": "Organizations",
      "description": "APIs for creditor institution, used for inspection of generated flows"
    },
    {
      "name": "PSP",
      "description": "APIs for payment service providers, used for creation and inspection of flows"
    },
    {
      "name": "Support",
      "description": "APIs for technical support, used for troubleshooting operations"
    }
  ],
  "components": {
    "schemas": {
      "AddPaymentRequest": {
        "type": "object",
        "required": [
          "payments"
        ],
        "properties": {
          "payments": {
            "type": "array",
            "maxItems": 1000,
            "minItems": 1,
            "items": {
              "$ref": "#/components/schemas/Payment"
            },
            "description": "The list of payments to be added on the draft flow"
          }
        }
      },
      "CreateFlowRequest": {
        "type": "object",
        "required": [
          "fdr",
          "fdrDate",
          "sender",
          "receiver",
          "regulation",
          "regulationDate",
          "totPayments",
          "sumPayments"
        ],
        "properties": {
          "fdr": {
            "type": "string",
            "examples": [
              "2016-08-16pspTest-1178"
            ],
            "pattern": "[a-zA-Z0-9\\-_]{1,35}",
            "description": "The value of the flow identifier.<br>In the XML request for SOAP primitives, this field is mappable with the tag <b>[NodoInviaFlussoRendicontazione.identificativoFlusso]</b>."
          },
          "fdrDate": {
            "$ref": "#/components/schemas/Instant",
            "type": "string",
            "examples": [
              "2025-01-01T12:20:30.800000Z"
            ],
            "description": "The date related to the flow reporting.<br>In the XML request for SOAP primitives, this field is mappable with the tag <b>[NodoInviaFlussoRendicontazione.dataOraFlusso]</b>."
          },
          "sender": {
            "$ref": "#/components/schemas/Sender",
            "type": "object",
            "description": "The information related to the entity that will compile and send the published flow."
          },
          "receiver": {
            "$ref": "#/components/schemas/Receiver",
            "type": "object",
            "description": "The information related to the entity that will receive the published flow."
          },
          "regulation": {
            "type": "string",
            "examples": [
              "SEPA - Bonifico X"
            ],
            "pattern": "^(.{1,35})$",
            "description": "The description related to the regulation payment related to the flow.<br>In the XML request for SOAP primitives, this field is mappable with the tag <b>[FlussoRiversamento.identificativoUnivocoRegolamento]</b>."
          },
          "regulationDate": {
            "$ref": "#/components/schemas/LocalDate",
            "type": "string",
            "examples": [
              "2023-04-03"
            ],
            "description": "The date of the regulation payment related to the flow.<br>In the XML request for SOAP primitives, this field is mappable with the tag <b>[FlussoRiversamento.dataRegolamento]</b>."
          },
          "bicCodePouringBank": {
            "type": "string",
            "examples": [
              "UNCRITMMXXX"
            ],
            "pattern": "^(.{1,35})$",
            "description": "The BIC code of the bank where the regulation payment related to the flow will be poured.<br>In the XML request for SOAP primitives, this field is mappable with the tag <b>[FlussoRiversamento.codiceBicBancaDiRiversamento]</b>."
          },
          "totPayments": {
            "type": "integer",
            "format": "int64",
            "examples": [
              1
            ],
            "description": "The total number of payments to be included in the flow during the flow compilation.<br>In the XML request for SOAP primitives, this field is mappable with the tag <b>[FlussoRiversamento.numeroTotalePagamenti]</b>.",
            "minimum": 1
          },
          "sumPayments": {
            "type": "number",
            "exclusiveMinimum": 0.0,
            "format": "double",
            "examples": [
              0.01
            ],
            "pattern": "^\\d{1,2147483647}[.]\\d{1,2}?$",
            "description": "The total amount of payments to be calculated in the flow during the flow compilation.<br>In the XML request for SOAP primitives, this field is mappable with the tag <b>[FlussoRiversamento.importoTotalePagamenti]</b>."
          }
        }
      },
      "DeletePaymentRequest": {
        "type": "object",
        "required": [
          "indexList"
        ],
        "properties": {
          "indexList": {
            "type": "array",
            "maxItems": 1000,
            "minItems": 1,
            "items": {
              "type": "integer",
              "format": "int64"
            },
            "description": "The list of payments indexes to be removed on the draft flow"
          }
        }
      },
      "ErrorMessage": {
        "type": "object",
        "properties": {
          "path": {
            "type": "string",
            "examples": [
              "detail.path.if-exist"
            ],
            "description": "The path reference for the specific error clause in the general response."
          },
          "message": {
            "type": "string",
            "examples": [
              "An unexpected error has occurred. Please contact support."
            ],
            "description": "The descriptive message for the specific error clause in the general response."
          }
        }
      },
      "ErrorResponse": {
        "type": "object",
        "properties": {
          "errorId": {
            "type": "string",
            "examples": [
              "50905466-1881-457b-b42f-fb7b2bfb1610"
            ],
            "description": "The unique identifier that can be used for tracking request and error response."
          },
          "httpStatusCode": {
            "type": "integer",
            "format": "int32",
            "examples": [
              500
            ],
            "description": "The HTTP status code related to the error message."
          },
          "httpStatusDescription": {
            "type": "string",
            "examples": [
              "Internal Server Error"
            ],
            "description": "The descriptive name of the HTTP status code."
          },
          "appErrorCode": {
            "type": "string",
            "examples": [
              "FDR-0500"
            ],
            "description": "The operational error code related to the error response"
          },
          "errors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ErrorMessage"
            },
            "description": "The list of specific errors to show for the error response."
          }
        }
      },
      "FlowByCICreated": {
        "type": "object",
        "properties": {
          "fdr": {
            "type": "string",
            "examples": [
              "2025-01-0188888888888-0000001"
            ],
            "description": "The unique identifier of the flow."
          },
          "organizationId": {
            "type": "string",
            "examples": [
              "77777777777"
            ],
            "description": "The domain identifier of the creditor institution related to the flow."
          },
          "revision": {
            "type": "integer",
            "format": "int64",
            "examples": [
              1
            ],
            "description": "The revision (or version) of the flow."
          },
          "created": {
            "$ref": "#/components/schemas/Instant",
            "type": "string",
            "examples": [
              "2025-01-01T12:00:30.900000Z"
            ],
            "description": "The date and time on which the flow is created."
          }
        }
      },
      "FlowByCIPublished": {
        "type": "object",
        "properties": {
          "fdr": {
            "type": "string",
            "examples": [
              "2025-01-0188888888888-0000001"
            ],
            "description": "The unique identifier of the flow."
          },
          "organizationId": {
            "type": "string",
            "examples": [
              "77777777777"
            ],
            "description": "The domain identifier of the creditor institution related to the flow."
          },
          "revision": {
            "type": "integer",
            "format": "int64",
            "examples": [
              1
            ],
            "description": "The revision (or version) of the flow."
          },
          "published": {
            "$ref": "#/components/schemas/Instant",
            "type": "string",
            "examples": [
              "2025-01-01T12:00:30.900000Z"
            ],
            "description": "The date and time on which the flow is published."
          }
        }
      },
      "FlowByPSP": {
        "type": "object",
        "properties": {
          "fdr": {
            "type": "string",
            "examples": [
              "2025-01-0188888888888-0000001"
            ],
            "description": "The unique identifier of the flow."
          },
          "pspId": {
            "type": "string",
            "examples": [
              "88888888888"
            ],
            "description": "The domain identifier of the PSP related to the flow."
          },
          "revision": {
            "type": "integer",
            "format": "int64",
            "examples": [
              1
            ],
            "description": "The revision (or version) of the flow."
          },
          "published": {
            "$ref": "#/components/schemas/Instant",
            "type": "string",
            "examples": [
              "2025-01-01T12:00:30.900000Z"
            ],
            "description": "The date and time on which the flow is published."
          },
          "flowDate": {
            "$ref": "#/components/schemas/Instant",
            "type": "string",
            "examples": [
              "2025-01-01T12:00:30.900000Z"
            ],
            "description": "The date and time on which the flow was created by the PSP."
          }
        }
      },
      "FlowBySenderAndReceiver": {
        "type": "object",
        "properties": {
          "pspId": {
            "type": "string",
            "examples": [
              "88888888888"
            ],
            "description": "The domain identifier of the PSP related to the flow."
          },
          "organizationId": {
            "type": "string",
            "examples": [
              "77777777777"
            ],
            "description": "The domain identifier of the creditor institution related to the flow."
          },
          "fdr": {
            "type": "string",
            "examples": [
              "2025-01-0188888888888-0000001"
            ],
            "description": "The unique identifier of the flow."
          },
          "revision": {
            "type": "integer",
            "format": "int64",
            "examples": [
              1
            ],
            "description": "The revision (or version) of the flow."
          },
          "created": {
            "$ref": "#/components/schemas/Instant",
            "type": "string",
            "examples": [
              "2025-01-01T12:00:30.900000Z"
            ],
            "description": "The date and time on which the flow is created."
          }
        }
      },
      "GenericResponse": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "examples": [
              "Success"
            ],
            "description": "The descriptive information that shows a message related to the executed operation."
          }
        }
      },
      "InfoResponse": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "examples": [
              "pagopa-fdr"
            ],
            "description": "The identificative name of the deployed application"
          },
          "version": {
            "type": "string",
            "examples": [
              "1.2.3"
            ],
            "description": "The current version of the deployed application"
          },
          "environment": {
            "type": "string",
            "examples": [
              "dev"
            ],
            "description": "The current environment where the application is deployed"
          },
          "description": {
            "type": "string",
            "examples": [
              "FDR - Flussi di rendicontazione"
            ],
            "description": "The descriptive information related to the info response"
          }
        }
      },
      "Instant": {
        "type": "string",
        "format": "date-time"
      },
      "LocalDate": {
        "type": "string",
        "format": "date"
      },
      "Metadata": {
        "type": "object",
        "properties": {
          "pageSize": {
            "type": "integer",
            "format": "int32",
            "examples": [
              25
            ],
            "description": "The size of the current page shown in response"
          },
          "pageNumber": {
            "type": "integer",
            "format": "int32",
            "examples": [
              1
            ],
            "description": "The index of the current page shown in response"
          },
          "totPage": {
            "type": "integer",
            "format": "int32",
            "examples": [
              3
            ],
            "description": "The total number of the pages that can be retrieved in order to show all elements."
          }
        }
      },
      "PaginatedFlowsBySenderAndReceiverResponse": {
        "type": "object",
        "properties": {
          "metadata": {
            "$ref": "#/components/schemas/Metadata",
            "type": "object",
            "description": "The metadata related to the paginated response."
          },
          "count": {
            "type": "integer",
            "format": "int64",
            "examples": [
              100
            ],
            "description": "The number of elements that can be found in this page."
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FlowBySenderAndReceiver"
            },
            "description": "The list of flows that are included in this page."
          }
        }
      },
      "PaginatedFlowsCreatedResponse": {
        "type": "object",
        "properties": {
          "metadata": {
            "$ref": "#/components/schemas/Metadata",
            "type": "object",
            "description": "The metadata related to the paginated response."
          },
          "count": {
            "type": "integer",
            "format": "int64",
            "examples": [
              100
            ],
            "description": "The number of elements that can be found in this page."
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FlowByCICreated"
            },
            "description": "The list of flows that are included in this page."
          }
        }
      },
      "PaginatedFlowsPublishedResponse": {
        "type": "object",
        "properties": {
          "metadata": {
            "$ref": "#/components/schemas/Metadata",
            "type": "object",
            "description": "The metadata related to the paginated response."
          },
          "count": {
            "type": "integer",
            "format": "int64",
            "examples": [
              100
            ],
            "description": "The number of elements that can be found in this page."
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FlowByCIPublished"
            },
            "description": "The list of flows that are included in this page."
          }
        }
      },
      "PaginatedFlowsResponse": {
        "type": "object",
        "properties": {
          "metadata": {
            "$ref": "#/components/schemas/Metadata",
            "type": "object",
            "description": "The metadata related to the paginated response."
          },
          "count": {
            "type": "integer",
            "format": "int64",
            "examples": [
              100
            ],
            "description": "The number of elements that can be found in this page."
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FlowByPSP"
            },
            "description": "The list of flows that are included in this page."
          }
        }
      },
      "PaginatedPaymentsResponse": {
        "type": "object",
        "properties": {
          "metadata": {
            "$ref": "#/components/schemas/Metadata",
            "type": "object",
            "description": "The metadata related to the paginated response."
          },
          "count": {
            "type": "integer",
            "format": "int64",
            "examples": [
              100
            ],
            "description": "The number of elements that can be found in this page."
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Payment"
            },
            "description": "The list of payments that are included in this page."
          }
        }
      },
      "Payment": {
        "type": "object",
        "required": [
          "index",
          "iuv",
          "iur",
          "idTransfer",
          "pay",
          "payStatus",
          "payDate"
        ],
        "properties": {
          "index": {
            "type": "integer",
            "format": "int64",
            "examples": [
              1
            ],
            "description": "Unique index of the payment in the flow",
            "minimum": 1
          },
          "iuv": {
            "type": "string",
            "examples": [
              "17854456582215"
            ],
            "pattern": "^(.{1,35})$",
            "description": "The value of the 'Identificativo Univoco Versamento' code related to the payment.<br>In the XML request for SOAP primitives, this field is mappable with the tag <b>[FlussoRiversamento.datiSingoliPagamenti.identificativoUnivocoVersamento]</b>."
          },
          "iur": {
            "type": "string",
            "examples": [
              "3354426511008"
            ],
            "pattern": "^(.{1,35})$",
            "description": "The value of the 'Identificativo Univoco Riscossione' code related to the payment in the flow.<br>In the XML request for SOAP primitives, this field is mappable with the tag <b>[FlussoRiversamento.datiSingoliPagamenti.identificativoUnivocoRiscossione]</b>."
          },
          "idTransfer": {
            "type": "integer",
            "format": "int64",
            "examples": [
              1
            ],
            "description": "The value of the transfer identifier related to the payment during the payment process.<br>In the XML request for SOAP primitives, this field is mappable with the tag <b>[FlussoRiversamento.datiSingoliPagamenti.indiceDatiSingoloPagamento]</b>.",
            "maximum": 5,
            "minimum": 1
          },
          "pay": {
            "type": "number",
            "exclusiveMinimum": 0.0,
            "format": "double",
            "examples": [
              0.01
            ],
            "pattern": "^\\d{1,2147483647}([.]\\d{1,2})?$",
            "description": "The value of the payment amount in decimal euro.<br>In the XML request for SOAP primitives, this field is mappable with the tag <b>[FlussoRiversamento.datiSingoliPagamenti.singoloImportoPagato]</b>."
          },
          "payStatus": {
            "type": "string",
            "enum": [
              "EXECUTED",
              "REVOKED",
              "STAND_IN",
              "STAND_IN_NO_RPT",
              "NO_RPT"
            ],
            "examples": [
              "EXECUTED"
            ],
            "description": "The value of the status of the payment in relation to ist completion.<br>In the XML request for SOAP primitives, this field is mappable with the tag <b>[FlussoRiversamento.datiSingoliPagamenti.codiceEsitoSingoloPagamento]</b>.<br>The enumeration is mapped with the following values:<br><ul><li>EXECUTED -> 0</li><li>REVOKED -> 3</li><li>STAND_IN -> 4</li><li>STAND_IN_NO_RPT -> 8</li><li>NO_RPT -> 9</li></ul>"
          },
          "payDate": {
            "$ref": "#/components/schemas/Instant",
            "type": "string",
            "examples": [
              "2025-01-01T12:30:50.900000Z"
            ],
            "description": "The value of the date of the payment in relation to its completion.<br>In the XML request for SOAP primitives, this field is mappable with the tag <b>[FlussoRiversamento.datiSingoliPagamenti.dataEsitoSingoloPagamento]</b>."
          }
        }
      },
      "Receiver": {
        "type": "object",
        "required": [
          "id",
          "organizationId",
          "organizationName"
        ],
        "properties": {
          "id": {
            "type": "string",
            "examples": [
              "APPBIT2B"
            ],
            "pattern": "^(.{1,35})$",
            "description": "The identifier of the Creditor Institution receiver entity.<br>In the XML request for SOAP primitives, this field is mappable with the tag <b>[FlussoRiversamento.istitutoRicevente.identificativoUnivocoRicevente.codiceIdentificativoUnivoco]</b>."
          },
          "organizationId": {
            "type": "string",
            "examples": [
              "20000000001"
            ],
            "pattern": "^(.{1,35})$",
            "description": "The domain identifier of the Creditor Institution receiver entity.<br>In the XML request for SOAP primitives, this field is mappable with the tag <b>[NodoInviaFlussoRendicontazione.identificativoDominio]</b>."
          },
          "organizationName": {
            "type": "string",
            "examples": [
              "Comune di Roma"
            ],
            "pattern": "^(.{1,140})$",
            "description": "The fiscal name of the Creditor Institution receiver entity.<br>In the XML request for SOAP primitives, this field is mappable with the tag <b>[FlussoRiversamento.istitutoRicevente.denominazioneRicevente]</b>."
          }
        }
      },
      "ReportingFlowStatusEnum": {
        "type": "string",
        "enum": [
          "CREATED",
          "INSERTED",
          "PUBLISHED"
        ]
      },
      "Sender": {
        "type": "object",
        "required": [
          "type",
          "id",
          "pspId",
          "pspName",
          "pspBrokerId",
          "channelId"
        ],
        "properties": {
          "type": {
            "$ref": "#/components/schemas/SenderTypeEnum",
            "type": "string",
            "enum": [
              "LEGAL_PERSON",
              "ABI_CODE",
              "BIC_CODE"
            ],
            "examples": [
              "LEGAL_PERSON"
            ],
            "description": "The type of the PSP sender entity.<br>In the XML request for SOAP primitives, this field is mappable with the tag <b>[FlussoRiversamento.istitutoMittente.identificativoUnivocoMittente.tipoIdentificativoUnivoco]</b>.The enumeration is mapped with the following values:<br><ul><li>LEGAL_PERSON -> G</li><li>ABI_CODE -> A</li><li>BIC_CODE -> B</li></ul>"
          },
          "id": {
            "type": "string",
            "examples": [
              "SELBIT2B"
            ],
            "pattern": "^(.{1,35})$",
            "description": "The identifier of the PSP sender entity.<br>In the XML request for SOAP primitives, this field is mappable with the tag <b>[FlussoRiversamento.istitutoMittente.identificativoUnivocoMittente.codiceIdentificativoUnivoco]</b>."
          },
          "pspId": {
            "type": "string",
            "examples": [
              "60000000001"
            ],
            "pattern": "^(.{1,35})$",
            "description": "The domain identifier of the PSP sender entity.<br>In the XML request for SOAP primitives, this field is mappable with the tag <b>[NodoInviaFlussoRendicontazione.identificativoPSP]</b>."
          },
          "pspName": {
            "type": "string",
            "examples": [
              "PSP Name"
            ],
            "pattern": "^(.{3,70})$",
            "description": "The fiscal name of the PSP sender entity.<br>In the XML request for SOAP primitives, this field is mappable with the tag <b>[FlussoRiversamento.istitutoMittente.denominazioneMittente]</b>."
          },
          "pspBrokerId": {
            "type": "string",
            "examples": [
              "70000000001"
            ],
            "pattern": "^(.{1,35})$",
            "description": "The domain identifier of the PSP sender entity's Broker.<br>In the XML request for SOAP primitives, this field is mappable with the tag <b>[NodoInviaFlussoRendicontazione.identificativoIntermediarioPSP]</b>."
          },
          "channelId": {
            "type": "string",
            "examples": [
              "80000000001"
            ],
            "pattern": "^(.{1,35})$",
            "description": "The identifier of the PSP sender entity's Channel.<br>In the XML request for SOAP primitives, this field is mappable with the tag <b>[NodoInviaFlussoRendicontazione.identificativoCanale]</b>."
          },
          "password": {
            "type": "string",
            "deprecated": true,
            "examples": [
              "password"
            ],
            "pattern": "^(\\w{8,15})$",
            "description": "The password of the PSP sender entity's Channel.<br>In the XML request for SOAP primitives, this field is mappable with the tag <b>[NodoInviaFlussoRendicontazione.password]</b>."
          }
        }
      },
      "SenderTypeEnum": {
        "type": "string",
        "enum": [
          "LEGAL_PERSON",
          "ABI_CODE",
          "BIC_CODE"
        ]
      },
      "SingleFlowCreatedResponse": {
        "type": "object",
        "properties": {
          "status": {
            "$ref": "#/components/schemas/ReportingFlowStatusEnum",
            "type": "string",
            "examples": [
              "CREATED"
            ],
            "description": "The specific status of publication of the flow"
          },
          "revision": {
            "type": "integer",
            "format": "int64",
            "examples": [
              4
            ],
            "description": "The revision (or version) of the flow."
          },
          "created": {
            "$ref": "#/components/schemas/Instant",
            "type": "string",
            "examples": [
              "2025-01-01T12:00:30.900000Z"
            ],
            "description": "The date and time on which the flow is created."
          },
          "updated": {
            "$ref": "#/components/schemas/Instant",
            "type": "string",
            "examples": [
              "2025-01-01T12:10:30.900000Z"
            ],
            "description": "The last date and time on which the flow is updated."
          },
          "fdr": {
            "type": "string",
            "examples": [
              "2025-01-0188888888888-0000001"
            ],
            "description": "The unique identifier of the flow."
          },
          "fdrDate": {
            "$ref": "#/components/schemas/Instant",
            "type": "string",
            "examples": [
              "2025-01-01T12:20:30.800000Z"
            ],
            "description": "The date related to the flow reporting."
          },
          "regulation": {
            "type": "string",
            "examples": [
              "SEPA - Bonifico X"
            ],
            "description": "The description related to the regulation payment related to the flow."
          },
          "regulationDate": {
            "$ref": "#/components/schemas/Instant",
            "type": "string",
            "examples": [
              "2023-04-03T12:00:30.900000Z"
            ],
            "description": "The date of the regulation payment related to the flow."
          },
          "bicCodePouringBank": {
            "type": "string",
            "examples": [
              "UNCRITMMXXX"
            ],
            "description": "The BIC code of the bank where the regulation payment related to the flow will be poured."
          },
          "sender": {
            "$ref": "#/components/schemas/Sender",
            "type": "object",
            "description": "The information related to the entity that will compile and send the published flow."
          },
          "receiver": {
            "$ref": "#/components/schemas/Receiver",
            "type": "object",
            "description": "The information related to the entity that will receive the published flow."
          },
          "computedTotPayments": {
            "type": "integer",
            "format": "int64",
            "examples": [
              93
            ],
            "description": "The computed total number of payments included in the flow during the compilation."
          },
          "computedSumPayments": {
            "type": "number",
            "format": "double",
            "examples": [
              81.66
            ],
            "description": "The computed total amount of payments calculated in the flow during the compilation."
          },
          "totPayments": {
            "type": "integer",
            "format": "int64",
            "examples": [
              100
            ],
            "description": "The total number of payments to be included in the flow during the flow compilation."
          },
          "sumPayments": {
            "type": "number",
            "format": "double",
            "examples": [
              100.95
            ],
            "description": "The total amount of payments to be calculated in the flow during the flow compilation."
          }
        }
      },
      "SingleFlowResponse": {
        "type": "object",
        "properties": {
          "status": {
            "$ref": "#/components/schemas/ReportingFlowStatusEnum",
            "type": "string",
            "examples": [
              "CREATED"
            ],
            "description": "The specific status of publication of the flow"
          },
          "revision": {
            "type": "integer",
            "format": "int64",
            "examples": [
              4
            ],
            "description": "The revision (or version) of the flow."
          },
          "created": {
            "$ref": "#/components/schemas/Instant",
            "type": "string",
            "examples": [
              "2025-01-01T12:00:30.900000Z"
            ],
            "description": "The date and time on which the flow is created."
          },
          "updated": {
            "$ref": "#/components/schemas/Instant",
            "type": "string",
            "examples": [
              "2025-01-01T12:10:30.900000Z"
            ],
            "description": "The last date and time on which the flow is updated."
          },
          "fdr": {
            "type": "string",
            "examples": [
              "2025-01-0188888888888-0000001"
            ],
            "description": "The unique identifier of the flow."
          },
          "fdrDate": {
            "$ref": "#/components/schemas/Instant",
            "type": "string",
            "examples": [
              "2025-01-01T12:20:30.800000Z"
            ],
            "description": "The date related to the flow reporting."
          },
          "regulation": {
            "type": "string",
            "examples": [
              "SEPA - Bonifico X"
            ],
            "description": "The description related to the regulation payment related to the flow."
          },
          "regulationDate": {
            "$ref": "#/components/schemas/LocalDate",
            "type": "string",
            "examples": [
              "2023-04-03"
            ],
            "description": "The date of the regulation payment related to the flow."
          },
          "bicCodePouringBank": {
            "type": "string",
            "examples": [
              "UNCRITMMXXX"
            ],
            "description": "The BIC code of the bank where the regulation payment related to the flow will be poured."
          },
          "sender": {
            "$ref": "#/components/schemas/Sender",
            "type": "object",
            "description": "The information related to the entity that will compile and send the published flow."
          },
          "receiver": {
            "$ref": "#/components/schemas/Receiver",
            "type": "object",
            "description": "The information related to the entity that will receive the published flow."
          },
          "published": {
            "$ref": "#/components/schemas/Instant",
            "type": "string",
            "examples": [
              "2025-01-01T12:20:30.900000Z"
            ],
            "description": "The date and time on which the flow is published."
          },
          "computedTotPayments": {
            "type": "integer",
            "format": "int64",
            "examples": [
              100
            ],
            "description": "The computed total number of payments included in the flow during the compilation."
          },
          "computedSumPayments": {
            "type": "number",
            "format": "double",
            "examples": [
              100.95
            ],
            "pattern": "^\\d{1,2147483647}[.]\\d{1,2}?$",
            "description": "The computed total amount of payments calculated in the flow during the compilation."
          },
          "totPayments": {
            "type": "integer",
            "format": "int64",
            "examples": [
              100
            ],
            "description": "The total number of payments to be included in the flow during the flow compilation."
          },
          "sumPayments": {
            "type": "number",
            "format": "double",
            "examples": [
              100.95
            ],
            "pattern": "^\\d{1,2147483647}[.]\\d{1,2}?$",
            "description": "The total amount of payments to be calculated in the flow during the flow compilation."
          }
        }
      }
    }
  },
  "paths": {
    "/info": {
      "get": {
        "summary": "Health-check",
        "description": "## Description:\nGet health check and deployment-related information",
        "operationId": "IInfoController_healthCheck",
        "tags": [
          "Info"
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "example": {
                  "errorId": "50905466-1881-457b-b42f-fb7b2bfb1610",
                  "httpStatusCode": 500,
                  "httpStatusDescription": "Internal Server Error",
                  "appErrorCode": "FDR-0500",
                  "errors": [
                    {
                      "message": "An unexpected error has occurred. Please contact support."
                    }
                  ]
                },
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/internal/psps/{pspId}/created/fdrs/{fdr}/organizations/{organizationId}": {
      "get": {
        "summary": "Get single draft flow related to the PSP, searching by name (for internal process)",
        "description": "## Description:\nThis API permits to search a single draft flow for a specific PSP.\nIn order to do so, it is required to add the following search filters:\n- Creditor institution identifier: for filtering by specific organization\n- PSP identifier: for filtering by flow-related PSP\n- Flow name: for filtering by specific instance of the flow\n\nThe result will contains a single element because there can be only one draft flow for each\nunique identifier.<br>\nBefore executing the query, the search filters are validated against entities configured for\n<i>Nodo dei Pagamenti</i> environment, in particular on creditor institution and PSP. Also,\nthe name of the flow is validated against a specific standard format.<br>\nThis API is used only by internal processes in FdR ecosystem.\n\n\n## Error codes:\nAPPLICATIVE CODE | HTTP CODE | MESSAGE\n- | - | -\n**FDR-2000** | 400 | PSP with ID [%] is invalid or unknown.\n**FDR-2001** | 400 | PSP with ID [%] is not enabled.\n**FDR-2008** | 400 | Creditor institution with ID [%] is invalid or unknown.\n**FDR-2009** | 400 | Creditor institution with ID [%] is not enabled.\n**FDR-3008** | 400 | Flow identifier [%] contains a date that is not compliant.\n**FDR-3009** | 400 | Flow identifier [%] contains a PSP ID that is not compliant.\n**FDR-3001** | 404 | Flow with ID [%] not found.\n\n\n## API properties:\nPROPERTY | VALUE\n- | -\n***Internal*** | Y\n***External*** | Y\n***Synchronous*** | Synchronous\n***Authorization*** | N\n***Authentication*** | Y (Subscription Key)\n***TPS*** | 1.0/sec\n***Idempotency*** | Y\n***Stateless*** | Y\n***Read/Write Intensive*** | Read\n***Cacheable*** | Y\n",
        "operationId": "IInternalOperationsController_getSingleFlowNotInPublishedStatusForInternalUse",
        "tags": [
          "Internal Operations"
        ],
        "parameters": [
          {
            "description": "The flow name, used as a search filter",
            "example": "2025-01-0188888888888-0001",
            "name": "fdr",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The creditor institution identifier, used as a search filter",
            "example": "15376371009",
            "name": "organizationId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The PSP identifier, used as a search filter",
            "example": "88888888888",
            "name": "pspId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SingleFlowCreatedResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "example": {
                  "httpStatusCode": 400,
                  "httpStatusDescription": "Bad Request",
                  "appErrorCode": "FDR-XXXX",
                  "errors": [
                    {
                      "path": "<detail.path.if-exist>",
                      "message": "<detail.message>"
                    }
                  ]
                },
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "example": {
                  "httpStatusCode": 404,
                  "httpStatusDescription": "Not Found",
                  "appErrorCode": "FDR-XXXX",
                  "errors": [
                    {
                      "message": "<detail.message>"
                    }
                  ]
                },
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "example": {
                  "errorId": "50905466-1881-457b-b42f-fb7b2bfb1610",
                  "httpStatusCode": 500,
                  "httpStatusDescription": "Internal Server Error",
                  "appErrorCode": "FDR-0500",
                  "errors": [
                    {
                      "message": "An unexpected error has occurred. Please contact support."
                    }
                  ]
                },
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/internal/psps/{pspId}/fdrs/{fdr}": {
      "delete": {
        "summary": "Delete an existing draft flow and all related payments (for internal process)",
        "description": "## Description:\nThis API permits to delete a draft flow and all the payments associated to it. The deletion process\nirreversibly removes the flow and all related payments, making it impossible to recover any data afterwards.\nThis procedure frees the draft for the flow with a specific identifier, enabling the generation of\na new revision from scratch.<br>\nPlease note that in order to remove an existing flow and all the related payments, the flow must\nexist and be in draft, i.e. not be in PUBLISHED status. A published flow cannot be removed at all and\ncan only be 'replaced' by the creation of a new revision of the same flow through the 'new flow creation'\nAPI, although the old revision will be present anyway.<br>\nBefore executing the operation, the request fields are validated against entities configured for\n<i>Nodo dei Pagamenti</i> environment, in particular on PSP.<br>\nThis API is used only by internal processes in FdR ecosystem.\n\n\n## Error codes:\nAPPLICATIVE CODE | HTTP CODE | MESSAGE\n- | - | -\n**FDR-2000** | 400 | PSP with ID [%] is invalid or unknown.\n**FDR-2001** | 400 | PSP with ID [%] is not enabled.\n**FDR-3008** | 400 | Flow identifier [%] contains a date that is not compliant.\n**FDR-3009** | 400 | Flow identifier [%] contains a PSP ID that is not compliant.\n**FDR-3001** | 404 | Flow with ID [%] not found.\n\n\n## API properties:\nPROPERTY | VALUE\n- | -\n***Internal*** | Y\n***External*** | Y\n***Synchronous*** | Synchronous\n***Authorization*** | N\n***Authentication*** | Y (Subscription Key)\n***TPS*** | 1.0/sec\n***Idempotency*** | N\n***Stateless*** | Y\n***Read/Write Intensive*** | Read and Write\n***Cacheable*** | N\n",
        "operationId": "IInternalOperationsController_deleteExistingFlowForInternalUse",
        "tags": [
          "Internal Operations"
        ],
        "parameters": [
          {
            "description": "The flow name, used as a search filter",
            "example": "2025-01-0188888888888-0001",
            "name": "fdr",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The PSP identifier, used as a search filter",
            "example": "88888888888",
            "name": "pspId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "example": {
                  "httpStatusCode": 400,
                  "httpStatusDescription": "Bad Request",
                  "appErrorCode": "FDR-XXXX",
                  "errors": [
                    {
                      "path": "<detail.path.if-exist>",
                      "message": "<detail.message>"
                    }
                  ]
                },
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "example": {
                  "httpStatusCode": 404,
                  "httpStatusDescription": "Not Found",
                  "appErrorCode": "FDR-XXXX",
                  "errors": [
                    {
                      "message": "<detail.message>"
                    }
                  ]
                },
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "example": {
                  "errorId": "50905466-1881-457b-b42f-fb7b2bfb1610",
                  "httpStatusCode": 500,
                  "httpStatusDescription": "Internal Server Error",
                  "appErrorCode": "FDR-0500",
                  "errors": [
                    {
                      "message": "An unexpected error has occurred. Please contact support."
                    }
                  ]
                },
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Create a new flow structure (for internal process)",
        "description": "## Description:\nThis API permits to generate a new flow for a specific creditor institution. The generated flow\nis only a structure that define the main fields and the guidelines related to the payments that\nmust be added in the next operations.<br>\nThe flow can only be created if no other flow exists in the CREATED or INSERTED state with the\nsame identifier. If it is necessary to define a new version but you have a flow in the listed statuses,\nyou must first publish the flow in draft status, or delete the flow completely via the API if you want\nto change it in its entirety.<br>\nBefore executing the operation, the request fields are validated against entities configured for\n<i>Nodo dei Pagamenti</i> environment, in particular (but not limited) on creditor institution\nand PSP. Also, the name of the flow is validated against a specific standard format.<br>\nThis API is used only by internal processes in FdR ecosystem.\n\n\n## Error codes:\nAPPLICATIVE CODE | HTTP CODE | MESSAGE\n- | - | -\n**FDR-2000** | 400 | PSP with ID [%] is invalid or unknown.\n**FDR-2001** | 400 | PSP with ID [%] is not enabled.\n**FDR-3002** | 400 | Flow with ID [%] already exists with [%] status.\n**FDR-2002** | 400 | PSP Broker with ID [%] is invalid or unknown.\n**FDR-2003** | 400 | PSP Broker with ID [%] is not enabled.\n**FDR-2004** | 400 | Channel with ID [%] is invalid or unknown.\n**FDR-2005** | 400 | Channel with ID [%] is not enabled.\n**FDR-2006** | 400 | Channel with ID [%] is not authorized to be used with PSP Broker with ID [%].\n**FDR-2007** | 400 | Channel with ID [%] is not authorized to be used with PSP with ID [%].\n**FDR-2008** | 400 | Creditor institution with ID [%] is invalid or unknown.\n**FDR-2009** | 400 | Creditor institution with ID [%] is not enabled.\n**FDR-3008** | 400 | Flow identifier [%] contains a date that is not compliant.\n**FDR-3009** | 400 | Flow identifier [%] contains a PSP ID that is not compliant.\n**FDR-3004** | 400 | Flow with ID [%] have field sender.pspId [%] that does not match with query param [%].\n**FDR-3010** | 400 | Field fdr [%] does not match with query param [%].\n\n\n## API properties:\nPROPERTY | VALUE\n- | -\n***Internal*** | Y\n***External*** | Y\n***Synchronous*** | Synchronous\n***Authorization*** | N\n***Authentication*** | Y (Subscription Key)\n***TPS*** | 1.0/sec\n***Idempotency*** | N\n***Stateless*** | Y\n***Read/Write Intensive*** | Write\n***Cacheable*** | N\n",
        "operationId": "IInternalOperationsController_createEmptyFlowForInternalUse",
        "tags": [
          "Internal Operations"
        ],
        "parameters": [
          {
            "description": "The flow name, used as a search filter",
            "example": "2025-01-0188888888888-0001",
            "name": "fdr",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "[a-zA-Z0-9\\-_]{1,35}"
            }
          },
          {
            "description": "The PSP identifier, used as a search filter",
            "example": "88888888888",
            "name": "pspId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateFlowRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "example": {
                  "httpStatusCode": 400,
                  "httpStatusDescription": "Bad Request",
                  "appErrorCode": "FDR-XXXX",
                  "errors": [
                    {
                      "path": "<detail.path.if-exist>",
                      "message": "<detail.message>"
                    }
                  ]
                },
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "example": {
                  "httpStatusCode": 404,
                  "httpStatusDescription": "Not Found",
                  "appErrorCode": "FDR-XXXX",
                  "errors": [
                    {
                      "message": "<detail.message>"
                    }
                  ]
                },
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "example": {
                  "errorId": "50905466-1881-457b-b42f-fb7b2bfb1610",
                  "httpStatusCode": 500,
                  "httpStatusDescription": "Internal Server Error",
                  "appErrorCode": "FDR-0500",
                  "errors": [
                    {
                      "message": "An unexpected error has occurred. Please contact support."
                    }
                  ]
                },
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/internal/psps/{pspId}/fdrs/{fdr}/payments/add": {
      "put": {
        "summary": "Add one or more payments to an existing flow (for internal process)",
        "description": "## Description:\nThis API permits to add one or more payments to a given flow, previously created through\nthe dedicated API. Newly added payments will be validated according to the indexes defined\nduring the insertion process and according to the totality of the indexes of the payments\nalready inserted in the same flow.<br>\nIn addition, during the process of adding payments the relevant flow is updated, in particular\nby adjusting the ‘computed values’: these fields will include the updated count of the inserted\npayments and the total amount of payments added together.<br>\nPlease note that in order to add a new payment, the flow must exist and be in draft, i.e.\nnot be in PUBLISHED status. In order to add a payment to an already published flow, it is necessary\nto create a new revision of the same flow through the 'new flow creation' API.<br>\nBefore executing the operation, the request fields are validated against entities configured for\n<i>Nodo dei Pagamenti</i> environment, in particular on PSP. Also, the name of the flow is validated\nagainst a specific standard format.<br>\nThis API is used only by internal processes in FdR ecosystem.\n\n\n## Error codes:\nAPPLICATIVE CODE | HTTP CODE | MESSAGE\n- | - | -\n**FDR-2000** | 400 | PSP with ID [%] is invalid or unknown.\n**FDR-2001** | 400 | PSP with ID [%] is not enabled.\n**FDR-3008** | 400 | Flow identifier [%] contains a date that is not compliant.\n**FDR-3009** | 400 | Flow identifier [%] contains a PSP ID that is not compliant.\n**FDR-3005** | 400 | There are one or more identical payment indexes in same request for flow with ID [%].\n**FDR-3001** | 404 | Flow with ID [%] not found.\n**FDR-3006** | 400 | One or more payment index already added on flow with ID [%].\n\n\n## API properties:\nPROPERTY | VALUE\n- | -\n***Internal*** | Y\n***External*** | Y\n***Synchronous*** | Synchronous\n***Authorization*** | N\n***Authentication*** | Y (Subscription Key)\n***TPS*** | 1.0/sec\n***Idempotency*** | N\n***Stateless*** | Y\n***Read/Write Intensive*** | Write\n***Cacheable*** | N\n",
        "operationId": "IInternalOperationsController_addPaymentToExistingFlowForInternalUse",
        "tags": [
          "Internal Operations"
        ],
        "parameters": [
          {
            "description": "The flow name, used as a search filter",
            "example": "2025-01-0188888888888-0001",
            "name": "fdr",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The PSP identifier, used as a search filter",
            "example": "88888888888",
            "name": "pspId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AddPaymentRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "example": {
                  "httpStatusCode": 400,
                  "httpStatusDescription": "Bad Request",
                  "appErrorCode": "FDR-XXXX",
                  "errors": [
                    {
                      "path": "<detail.path.if-exist>",
                      "message": "<detail.message>"
                    }
                  ]
                },
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "example": {
                  "httpStatusCode": 404,
                  "httpStatusDescription": "Not Found",
                  "appErrorCode": "FDR-XXXX",
                  "errors": [
                    {
                      "message": "<detail.message>"
                    }
                  ]
                },
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "example": {
                  "errorId": "50905466-1881-457b-b42f-fb7b2bfb1610",
                  "httpStatusCode": 500,
                  "httpStatusDescription": "Internal Server Error",
                  "appErrorCode": "FDR-0500",
                  "errors": [
                    {
                      "message": "An unexpected error has occurred. Please contact support."
                    }
                  ]
                },
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/internal/psps/{pspId}/fdrs/{fdr}/payments/del": {
      "put": {
        "summary": "Delete one or more payments from an existing flow (for internal process)",
        "description": "## Description:\nThis API permits to remove one or more payments from a particular flow, which were\npreviously added via the dedicated API. The payments to be removed are indicated in the request\nvia the index with which they were previously defined when they were added to the flow,\nand must all be present within the flow at the time of deletion.<br>\nIn addition, during the process of removing payments the relevant flow is updated, in particular\nby adjusting the ‘computed fields’: these fields will include the updated count of the removed\npayments and the total amount of payments reduced by the amounts of the removed payments.<br>\nPlease note that in order to remove an existing payment, the flow must exist and be in draft,\ni.e. not be in PUBLISHED status. In order to remove a payment from a flow that has already been\npublished, it is necessary to create a new revision of the same flow through the 'new flow creation' API\nnot including the affected payments.<br>\nBefore executing the operation, the request fields are validated against entities configured for\n<i>Nodo dei Pagamenti</i> environment, in particular on PSP.<br>\nThis API is used only by internal processes in FdR ecosystem.\n\n\n## Error codes:\nAPPLICATIVE CODE | HTTP CODE | MESSAGE\n- | - | -\n**FDR-2000** | 400 | PSP with ID [%] is invalid or unknown.\n**FDR-2001** | 400 | PSP with ID [%] is not enabled.\n**FDR-3008** | 400 | Flow identifier [%] contains a date that is not compliant.\n**FDR-3009** | 400 | Flow identifier [%] contains a PSP ID that is not compliant.\n**FDR-3005** | 400 | There are one or more identical payment indexes in same request for flow with ID [%].\n**FDR-3001** | 404 | Flow with ID [%] not found.\n**FDR-3003** | 400 | Flow with ID [%] exists with [%] status.\n**FDR-3007** | 400 | Index of payment not match with index loaded on flow with ID [%].\n\n\n## API properties:\nPROPERTY | VALUE\n- | -\n***Internal*** | Y\n***External*** | Y\n***Synchronous*** | Synchronous\n***Authorization*** | N\n***Authentication*** | Y (Subscription Key)\n***TPS*** | 1.0/sec\n***Idempotency*** | N\n***Stateless*** | Y\n***Read/Write Intensive*** | Write\n***Cacheable*** | N\n",
        "operationId": "IInternalOperationsController_deletePaymentFromExistingFlowForInternalUse",
        "tags": [
          "Internal Operations"
        ],
        "parameters": [
          {
            "description": "The flow name, used as a search filter",
            "example": "2025-01-0188888888888-0001",
            "name": "fdr",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The PSP identifier, used as a search filter",
            "example": "88888888888",
            "name": "pspId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DeletePaymentRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "example": {
                  "httpStatusCode": 400,
                  "httpStatusDescription": "Bad Request",
                  "appErrorCode": "FDR-XXXX",
                  "errors": [
                    {
                      "path": "<detail.path.if-exist>",
                      "message": "<detail.message>"
                    }
                  ]
                },
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "example": {
                  "httpStatusCode": 404,
                  "httpStatusDescription": "Not Found",
                  "appErrorCode": "FDR-XXXX",
                  "errors": [
                    {
                      "message": "<detail.message>"
                    }
                  ]
                },
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "example": {
                  "errorId": "50905466-1881-457b-b42f-fb7b2bfb1610",
                  "httpStatusCode": 500,
                  "httpStatusDescription": "Internal Server Error",
                  "appErrorCode": "FDR-0500",
                  "errors": [
                    {
                      "message": "An unexpected error has occurred. Please contact support."
                    }
                  ]
                },
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/internal/psps/{pspId}/fdrs/{fdr}/publish": {
      "post": {
        "summary": "Publish an existing flow in draft status (for internal process)",
        "description": "## Description:\nThis API permits to publish a flow in draft, completed and ready to be retrieved by\nthe creditor institution related to the flow. The publication release a new revision of\ncertain flow, permitting to generate a new version if required.<br>\nIn addition, during the flow publication process a final validation of the \"computed fields\" is performed,\nchecking that their values are equal to the values pre-defined in the creation phase of the empty flow.\nPlease note that, in order to publish a flow, it must be in draft, so it must not be already in PUBLISHED status.<br>\nBefore executing the operation, the request fields are validated against entities configured for\n<i>Nodo dei Pagamenti</i> environment, in particular on PSP.<br>\nThis API is used only by internal processes in FdR ecosystem and, because of this, does not\nprovide a historicization procedure: that task is demanded uniquely to external publish API.\n\n\n## Error codes:\nAPPLICATIVE CODE | HTTP CODE | MESSAGE\n- | - | -\n**FDR-2000** | 400 | PSP with ID [%] is invalid or unknown.\n**FDR-2001** | 400 | PSP with ID [%] is not enabled.\n**FDR-3008** | 400 | Flow identifier [%] contains a date that is not compliant.\n**FDR-3009** | 400 | Flow identifier [%] contains a PSP ID that is not compliant.\n**FDR-3001** | 404 | Flow with ID [%] not found.\n**FDR-3003** | 400 | Flow with ID [%] exists with [%] status.\n**FDR-4001** | 400 | On flow with ID [%], [%] payments were defined to be added but [%] were actually added.\n**FDR-4002** | 400 | On flow with ID [%], an amount of [%] euro for all payments were defined to be added but [%] is actually calculated.\n\n\n## API properties:\nPROPERTY | VALUE\n- | -\n***Internal*** | Y\n***External*** | Y\n***Synchronous*** | Synchronous\n***Authorization*** | N\n***Authentication*** | Y (Subscription Key)\n***TPS*** | 1.0/sec\n***Idempotency*** | N\n***Stateless*** | Y\n***Read/Write Intensive*** | Write\n***Cacheable*** | N\n",
        "operationId": "IInternalOperationsController_publishFlowForInternalUse",
        "tags": [
          "Internal Operations"
        ],
        "parameters": [
          {
            "description": "The flow name, used as a search filter",
            "example": "2025-01-0188888888888-0001",
            "name": "fdr",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The PSP identifier, used as a search filter",
            "example": "88888888888",
            "name": "pspId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "example": {
                  "httpStatusCode": 400,
                  "httpStatusDescription": "Bad Request",
                  "appErrorCode": "FDR-XXXX",
                  "errors": [
                    {
                      "path": "<detail.path.if-exist>",
                      "message": "<detail.message>"
                    }
                  ]
                },
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "example": {
                  "httpStatusCode": 404,
                  "httpStatusDescription": "Not Found",
                  "appErrorCode": "FDR-XXXX",
                  "errors": [
                    {
                      "message": "<detail.message>"
                    }
                  ]
                },
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "example": {
                  "errorId": "50905466-1881-457b-b42f-fb7b2bfb1610",
                  "httpStatusCode": 500,
                  "httpStatusDescription": "Internal Server Error",
                  "appErrorCode": "FDR-0500",
                  "errors": [
                    {
                      "message": "An unexpected error has occurred. Please contact support."
                    }
                  ]
                },
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/internal/psps/{pspId}/iur/{iur}": {
      "get": {
        "summary": "Get all flows related to PSP, only if contains a payment with specific IUR code",
        "description": "## Description:\nThis API permits to search all the flows that contains a payment with specific IUR code\n(Identificativo Univoco Riscossione) in relation to a PSP.<br>\nThe result of the query is paginated and contains all the metadata needed for pagination purposes.<br>\nThis API is used for internal purpose in order to perform a deep-search for dedicated troubleshooting.\n",
        "operationId": "ISupportController_getByIur",
        "tags": [
          "Support"
        ],
        "parameters": [
          {
            "description": "The payment's IUR code, used as a search filter",
            "example": "17854456582215",
            "name": "iur",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^(.{1,35})$"
            }
          },
          {
            "description": "The PSP identifier, used as a search filter",
            "example": "88888888888",
            "name": "pspId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^(.{1,35})$"
            }
          },
          {
            "description": "The lower limit of the date related to the flow creation date",
            "example": "2025-01-01T12:00:00.00000Z",
            "name": "createdFrom",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/Instant"
            }
          },
          {
            "description": "The upper limit of the date related to the flow creation date",
            "example": "2025-01-31T12:00:00.00000Z",
            "name": "createdTo",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/Instant"
            }
          },
          {
            "description": "The index of the page to be shown in the result",
            "example": 1,
            "name": "page",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int64",
              "default": 1,
              "minimum": 1
            }
          },
          {
            "description": "The number of the elements of the page to be shown in the result",
            "example": 50,
            "name": "size",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int64",
              "default": 1000,
              "minimum": 1
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedFlowsBySenderAndReceiverResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "example": {
                  "httpStatusCode": 400,
                  "httpStatusDescription": "Bad Request",
                  "appErrorCode": "FDR-XXXX",
                  "errors": [
                    {
                      "path": "<detail.path.if-exist>",
                      "message": "<detail.message>"
                    }
                  ]
                },
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "example": {
                  "httpStatusCode": 404,
                  "httpStatusDescription": "Not Found",
                  "appErrorCode": "FDR-XXXX",
                  "errors": [
                    {
                      "message": "<detail.message>"
                    }
                  ]
                },
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "example": {
                  "errorId": "50905466-1881-457b-b42f-fb7b2bfb1610",
                  "httpStatusCode": 500,
                  "httpStatusDescription": "Internal Server Error",
                  "appErrorCode": "FDR-0500",
                  "errors": [
                    {
                      "message": "An unexpected error has occurred. Please contact support."
                    }
                  ]
                },
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/internal/psps/{pspId}/iuv/{iuv}": {
      "get": {
        "summary": "Get all flows related to PSP, only if contains a payment with specific IUV code",
        "description": "## Description:\nThis API permits to search all the flows that contains a payment with specific IUV code\n(Identificativo Univoco Versamento) in relation to a PSP.<br>\nThe result of the query is paginated and contains all the metadata needed for pagination purposes.<br>\nThis API is used for internal purpose in order to perform a deep-search for dedicated troubleshooting.\n",
        "operationId": "ISupportController_getByIuv",
        "tags": [
          "Support"
        ],
        "parameters": [
          {
            "description": "The payment's IUV code, used as a search filter",
            "example": "17854456582215",
            "name": "iuv",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^(.{1,35})$"
            }
          },
          {
            "description": "The PSP identifier, used as a search filter",
            "example": "88888888888",
            "name": "pspId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^(.{1,35})$"
            }
          },
          {
            "description": "The lower limit of the date related to the flow creation date",
            "example": "2025-01-01T12:00:00.00000Z",
            "name": "createdFrom",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/Instant"
            }
          },
          {
            "description": "The upper limit of the date related to the flow creation date",
            "example": "2025-01-31T12:00:00.00000Z",
            "name": "createdTo",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/Instant"
            }
          },
          {
            "description": "The index of the page to be shown in the result",
            "example": 1,
            "name": "page",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int64",
              "default": 1,
              "minimum": 1
            }
          },
          {
            "description": "The number of the elements of the page to be shown in the result",
            "example": 50,
            "name": "size",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int64",
              "default": 1000,
              "minimum": 1
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedFlowsBySenderAndReceiverResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "example": {
                  "httpStatusCode": 400,
                  "httpStatusDescription": "Bad Request",
                  "appErrorCode": "FDR-XXXX",
                  "errors": [
                    {
                      "path": "<detail.path.if-exist>",
                      "message": "<detail.message>"
                    }
                  ]
                },
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "example": {
                  "httpStatusCode": 404,
                  "httpStatusDescription": "Not Found",
                  "appErrorCode": "FDR-XXXX",
                  "errors": [
                    {
                      "message": "<detail.message>"
                    }
                  ]
                },
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "example": {
                  "errorId": "50905466-1881-457b-b42f-fb7b2bfb1610",
                  "httpStatusCode": 500,
                  "httpStatusDescription": "Internal Server Error",
                  "appErrorCode": "FDR-0500",
                  "errors": [
                    {
                      "message": "An unexpected error has occurred. Please contact support."
                    }
                  ]
                },
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/organizations/{organizationId}/fdrs": {
      "get": {
        "summary": "Get all published flow related to creditor institution",
        "description": "## Description:\nThis API permits to search all published flows for a specific creditor institution,\nformatted in a paginated view. The search can be enhanced including the PSP identifier\nin order to filter only the flows for certain PSP. The only flows retrieved are the latest\nrevision, as same as \"nodoChiediElencoFlussiRendicontazione\" primitive does.<br>\nBefore executing the query, the search filters are validated against entities configured for\n<i>Nodo dei Pagamenti</i> environment, in particular on PSP (if that search filter is defined).<br>\nThe result of the query is paginated and contains all the metadata needed for pagination purposes.<br>\n\n\n## Error codes:\nAPPLICATIVE CODE | HTTP CODE | MESSAGE\n- | - | -\n**FDR-2000** | 400 | PSP with ID [%] is invalid or unknown.\n**FDR-2001** | 400 | PSP with ID [%] is not enabled.\n**FDR-2008** | 400 | Creditor institution with ID [%] is invalid or unknown.\n**FDR-2009** | 400 | Creditor institution with ID [%] is not enabled.\n\n\n## API properties:\nPROPERTY | VALUE\n- | -\n***Internal*** | N\n***External*** | Y\n***Synchronous*** | Synchronous\n***Authorization*** | Y (Authorizer)\n***Authentication*** | Y (Subscription Key)\n***TPS*** | 1.0/sec\n***Idempotency*** | Y\n***Stateless*** | Y\n***Read/Write Intensive*** | Read\n***Cacheable*** | Y\n",
        "operationId": "IOrganizationsController_getAllPublishedFlows",
        "tags": [
          "Organizations"
        ],
        "parameters": [
          {
            "description": "The creditor institution identifier, used as a search filter",
            "example": "15376371009",
            "name": "organizationId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^(.{1,35})$"
            }
          },
          {
            "description": "A date to be used as a lower limit search on flow date. In format ISO-8601 (yyyy-MM-dd'T'HH:mm:ss)",
            "example": "2025-01-01T12:00:00Z",
            "name": "flowDate",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/Instant"
            }
          },
          {
            "description": "The index of the page to be shown in the result",
            "example": 1,
            "name": "page",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int64",
              "default": 1,
              "minimum": 1
            }
          },
          {
            "description": "The PSP identifier, used as a search filter",
            "example": "88888888888",
            "name": "pspId",
            "in": "query",
            "schema": {
              "type": "string",
              "pattern": "^(.{1,35})$"
            }
          },
          {
            "description": "A date to be used as a lower limit search on publication date. In format ISO-8601 (yyyy-MM-dd'T'HH:mm:ss)",
            "example": "2025-01-01T12:00:00Z",
            "name": "publishedGt",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/Instant"
            }
          },
          {
            "description": "The number of the elements of the page to be shown in the result",
            "example": 50,
            "name": "size",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int64",
              "default": 1000,
              "minimum": 1
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedFlowsResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "example": {
                  "httpStatusCode": 400,
                  "httpStatusDescription": "Bad Request",
                  "appErrorCode": "FDR-XXXX",
                  "errors": [
                    {
                      "path": "<detail.path.if-exist>",
                      "message": "<detail.message>"
                    }
                  ]
                },
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "example": {
                  "httpStatusCode": 404,
                  "httpStatusDescription": "Not Found",
                  "appErrorCode": "FDR-XXXX",
                  "errors": [
                    {
                      "message": "<detail.message>"
                    }
                  ]
                },
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "example": {
                  "errorId": "50905466-1881-457b-b42f-fb7b2bfb1610",
                  "httpStatusCode": 500,
                  "httpStatusDescription": "Internal Server Error",
                  "appErrorCode": "FDR-0500",
                  "errors": [
                    {
                      "message": "An unexpected error has occurred. Please contact support."
                    }
                  ]
                },
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/organizations/{organizationId}/fdrs/{fdr}/revisions/{revision}/psps/{pspId}": {
      "get": {
        "summary": "Get single published flow related to creditor institution, searching by name and revision",
        "description": "## Description:\nThis API permits to search a single published flows for a specific creditor institution.\nIn order to do so, it is required to add the following search filters:\n - Creditor institution identifier: for filtering by specific organization\n - PSP identifier: for filtering by flow-related PSP\n - Flow name: for filtering by specific instance of the flow\n - Revision: for filtering by flow revision\n\nBefore executing the query, the search filters are validated against entities configured for\n<i>Nodo dei Pagamenti</i> environment, in particular on creditor institution and PSP. Also,\nthe name of the flow is validated against a specific standard format.<br>\n\n\n## Error codes:\nAPPLICATIVE CODE | HTTP CODE | MESSAGE\n- | - | -\n**FDR-2000** | 400 | PSP with ID [%] is invalid or unknown.\n**FDR-2001** | 400 | PSP with ID [%] is not enabled.\n**FDR-2008** | 400 | Creditor institution with ID [%] is invalid or unknown.\n**FDR-2009** | 400 | Creditor institution with ID [%] is not enabled.\n**FDR-3008** | 400 | Flow identifier [%] contains a date that is not compliant.\n**FDR-3009** | 400 | Flow identifier [%] contains a PSP ID that is not compliant.\n**FDR-3001** | 404 | Flow with ID [%] not found.\n\n\n## API properties:\nPROPERTY | VALUE\n- | -\n***Internal*** | N\n***External*** | Y\n***Synchronous*** | Synchronous\n***Authorization*** | Y (Authorizer)\n***Authentication*** | Y (Subscription Key)\n***TPS*** | 1.0/sec\n***Idempotency*** | Y\n***Stateless*** | Y\n***Read/Write Intensive*** | Read\n***Cacheable*** | Y\n",
        "operationId": "IOrganizationsController_getSinglePublishedFlow",
        "tags": [
          "Organizations"
        ],
        "parameters": [
          {
            "description": "The flow name, used as a search filter",
            "example": "2025-01-0188888888888-0001",
            "name": "fdr",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The creditor institution identifier, used as a search filter",
            "example": "15376371009",
            "name": "organizationId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The PSP identifier, used as a search filter",
            "example": "88888888888",
            "name": "pspId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The specific revision of the flow needed",
            "example": 1,
            "name": "revision",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64",
              "minimum": 1
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SingleFlowResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "example": {
                  "httpStatusCode": 400,
                  "httpStatusDescription": "Bad Request",
                  "appErrorCode": "FDR-XXXX",
                  "errors": [
                    {
                      "path": "<detail.path.if-exist>",
                      "message": "<detail.message>"
                    }
                  ]
                },
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "example": {
                  "httpStatusCode": 404,
                  "httpStatusDescription": "Not Found",
                  "appErrorCode": "FDR-XXXX",
                  "errors": [
                    {
                      "message": "<detail.message>"
                    }
                  ]
                },
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "example": {
                  "errorId": "50905466-1881-457b-b42f-fb7b2bfb1610",
                  "httpStatusCode": 500,
                  "httpStatusDescription": "Internal Server Error",
                  "appErrorCode": "FDR-0500",
                  "errors": [
                    {
                      "message": "An unexpected error has occurred. Please contact support."
                    }
                  ]
                },
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/organizations/{organizationId}/fdrs/{fdr}/revisions/{revision}/psps/{pspId}/payments": {
      "get": {
        "summary": "Get all payments of single published flow related to creditor institution, searching by name and revision",
        "description": "## Description:\nThis API permits to search all the payments of a single published flow for a specific creditor institution,\nformatted in a paginated view. In order to do so, it is required to add the following search filters:\n - Creditor institution identifier: for filtering by specific organization\n - PSP identifier: for filtering by flow-related PSP\n - Flow name: for filtering by specific instance of the flow\n - Revision: for filtering by flow revision\n\nBefore executing the query, the search filters are validated against entities configured for\n<i>Nodo dei Pagamenti</i> environment, in particular on creditor institution and PSP. Also,\nthe name of the flow is validated against a specific standard format.<br>\nThe result of the query is paginated and contains all the metadata needed for pagination purposes.<br>\n\n\n## Error codes:\nAPPLICATIVE CODE | HTTP CODE | MESSAGE\n- | - | -\n**FDR-2000** | 400 | PSP with ID [%] is invalid or unknown.\n**FDR-2001** | 400 | PSP with ID [%] is not enabled.\n**FDR-2008** | 400 | Creditor institution with ID [%] is invalid or unknown.\n**FDR-2009** | 400 | Creditor institution with ID [%] is not enabled.\n**FDR-3008** | 400 | Flow identifier [%] contains a date that is not compliant.\n**FDR-3009** | 400 | Flow identifier [%] contains a PSP ID that is not compliant.\n**FDR-3001** | 404 | Flow with ID [%] not found.\n\n\n## API properties:\nPROPERTY | VALUE\n- | -\n***Internal*** | N\n***External*** | Y\n***Synchronous*** | Synchronous\n***Authorization*** | Y (Authorizer)\n***Authentication*** | Y (Subscription Key)\n***TPS*** | 1.0/sec\n***Idempotency*** | Y\n***Stateless*** | Y\n***Read/Write Intensive*** | Read\n***Cacheable*** | Y\n",
        "operationId": "IOrganizationsController_getPaymentsFromPublishedFlow",
        "tags": [
          "Organizations"
        ],
        "parameters": [
          {
            "description": "The flow name, used as a search filter",
            "example": "2025-01-0188888888888-0001",
            "name": "fdr",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The creditor institution identifier, used as a search filter",
            "example": "15376371009",
            "name": "organizationId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The PSP identifier, used as a search filter",
            "example": "88888888888",
            "name": "pspId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The specific revision of the flow needed",
            "example": 1,
            "name": "revision",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64",
              "minimum": 1
            }
          },
          {
            "description": "The index of the page to be shown in the result",
            "example": 1,
            "name": "page",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int64",
              "default": 1,
              "minimum": 1
            }
          },
          {
            "description": "The number of the elements of the page to be shown in the result",
            "example": 50,
            "name": "size",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int64",
              "default": 1000,
              "minimum": 1
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedPaymentsResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "example": {
                  "httpStatusCode": 400,
                  "httpStatusDescription": "Bad Request",
                  "appErrorCode": "FDR-XXXX",
                  "errors": [
                    {
                      "path": "<detail.path.if-exist>",
                      "message": "<detail.message>"
                    }
                  ]
                },
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "example": {
                  "httpStatusCode": 404,
                  "httpStatusDescription": "Not Found",
                  "appErrorCode": "FDR-XXXX",
                  "errors": [
                    {
                      "message": "<detail.message>"
                    }
                  ]
                },
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "example": {
                  "errorId": "50905466-1881-457b-b42f-fb7b2bfb1610",
                  "httpStatusCode": 500,
                  "httpStatusDescription": "Internal Server Error",
                  "appErrorCode": "FDR-0500",
                  "errors": [
                    {
                      "message": "An unexpected error has occurred. Please contact support."
                    }
                  ]
                },
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/psps/{pspId}/created": {
      "get": {
        "summary": "Get all draft flows related to the PSP",
        "description": "## Description:\nThis API permits to search all draft flows for a specific PSP, formatted in a paginated view.\nThe only flows retrieved are the single draft revision, one for each flow identifier.<br>\nBefore executing the query, the search filters are validated against entities configured for\n<i>Nodo dei Pagamenti</i> environment, in particular on PSP.<br>\nThe result of the query is paginated and contains all the metadata needed for pagination purposes.<br>\n\n\n## Error codes:\nAPPLICATIVE CODE | HTTP CODE | MESSAGE\n- | - | -\n**FDR-2000** | 400 | PSP with ID [%] is invalid or unknown.\n**FDR-2001** | 400 | PSP with ID [%] is not enabled.\n\n\n## API properties:\nPROPERTY | VALUE\n- | -\n***Internal*** | N\n***External*** | Y\n***Synchronous*** | Synchronous\n***Authorization*** | Y (Authorizer)\n***Authentication*** | Y (Subscription Key)\n***TPS*** | 1.0/sec\n***Idempotency*** | Y\n***Stateless*** | Y\n***Read/Write Intensive*** | Read\n***Cacheable*** | Y\n",
        "operationId": "IPspsController_getAllFlowsNotInPublishedStatus",
        "tags": [
          "PSP"
        ],
        "parameters": [
          {
            "description": "The PSP identifier, used as a search filter",
            "example": "88888888888",
            "name": "pspId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "A date to be used as a lower limit search on creation date. In format ISO-8601 (yyyy-MM-dd'T'HH:mm:ss)",
            "example": "2025-01-01T12:00:00Z",
            "name": "createdGt",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/Instant"
            }
          },
          {
            "description": "The index of the page to be shown in the result",
            "example": 1,
            "name": "page",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int64",
              "default": 1,
              "minimum": 1
            }
          },
          {
            "description": "The number of the elements of the page to be shown in the result",
            "example": 50,
            "name": "size",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int64",
              "default": 1000,
              "minimum": 1
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedFlowsCreatedResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "example": {
                  "httpStatusCode": 400,
                  "httpStatusDescription": "Bad Request",
                  "appErrorCode": "FDR-XXXX",
                  "errors": [
                    {
                      "path": "<detail.path.if-exist>",
                      "message": "<detail.message>"
                    }
                  ]
                },
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "example": {
                  "httpStatusCode": 404,
                  "httpStatusDescription": "Not Found",
                  "appErrorCode": "FDR-XXXX",
                  "errors": [
                    {
                      "message": "<detail.message>"
                    }
                  ]
                },
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "example": {
                  "errorId": "50905466-1881-457b-b42f-fb7b2bfb1610",
                  "httpStatusCode": 500,
                  "httpStatusDescription": "Internal Server Error",
                  "appErrorCode": "FDR-0500",
                  "errors": [
                    {
                      "message": "An unexpected error has occurred. Please contact support."
                    }
                  ]
                },
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/psps/{pspId}/created/fdrs/{fdr}/organizations/{organizationId}": {
      "get": {
        "summary": "Get single draft flow related to the PSP, searching by name",
        "description": "## Description:\nThis API permits to search a single draft flow for a specific PSP.\nIn order to do so, it is required to add the following search filters:\n- Creditor institution identifier: for filtering by specific organization\n- PSP identifier: for filtering by flow-related PSP\n- Flow name: for filtering by specific instance of the flow\n\nThe result will contains a single element because there can be only one draft flow for each\nunique identifier.<br>\nBefore executing the query, the search filters are validated against entities configured for\n<i>Nodo dei Pagamenti</i> environment, in particular on creditor institution and PSP. Also,\nthe name of the flow is validated against a specific standard format.<br>\n\n\n## Error codes:\nAPPLICATIVE CODE | HTTP CODE | MESSAGE\n- | - | -\n**FDR-2000** | 400 | PSP with ID [%] is invalid or unknown.\n**FDR-2001** | 400 | PSP with ID [%] is not enabled.\n**FDR-2008** | 400 | Creditor institution with ID [%] is invalid or unknown.\n**FDR-2009** | 400 | Creditor institution with ID [%] is not enabled.\n**FDR-3008** | 400 | Flow identifier [%] contains a date that is not compliant.\n**FDR-3009** | 400 | Flow identifier [%] contains a PSP ID that is not compliant.\n**FDR-3001** | 404 | Flow with ID [%] not found.\n\n\n## API properties:\nPROPERTY | VALUE\n- | -\n***Internal*** | N\n***External*** | Y\n***Synchronous*** | Synchronous\n***Authorization*** | Y (Authorizer)\n***Authentication*** | Y (Subscription Key)\n***TPS*** | 1.0/sec\n***Idempotency*** | Y\n***Stateless*** | Y\n***Read/Write Intensive*** | Read\n***Cacheable*** | Y\n",
        "operationId": "IPspsController_getSingleFlowNotInPublishedStatus",
        "tags": [
          "PSP"
        ],
        "parameters": [
          {
            "description": "The flow name, used as a search filter",
            "example": "2025-01-0188888888888-0001",
            "name": "fdr",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The creditor institution identifier, used as a search filter",
            "example": "15376371009",
            "name": "organizationId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The PSP identifier, used as a search filter",
            "example": "88888888888",
            "name": "pspId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SingleFlowCreatedResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "example": {
                  "httpStatusCode": 400,
                  "httpStatusDescription": "Bad Request",
                  "appErrorCode": "FDR-XXXX",
                  "errors": [
                    {
                      "path": "<detail.path.if-exist>",
                      "message": "<detail.message>"
                    }
                  ]
                },
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "example": {
                  "httpStatusCode": 404,
                  "httpStatusDescription": "Not Found",
                  "appErrorCode": "FDR-XXXX",
                  "errors": [
                    {
                      "message": "<detail.message>"
                    }
                  ]
                },
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "example": {
                  "errorId": "50905466-1881-457b-b42f-fb7b2bfb1610",
                  "httpStatusCode": 500,
                  "httpStatusDescription": "Internal Server Error",
                  "appErrorCode": "FDR-0500",
                  "errors": [
                    {
                      "message": "An unexpected error has occurred. Please contact support."
                    }
                  ]
                },
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/psps/{pspId}/created/fdrs/{fdr}/organizations/{organizationId}/payments": {
      "get": {
        "summary": "Get payments of draft flow related to the PSP, searching by name",
        "description": "## Description:\nThis API permits to search all the payments of a single draft flow for a specific PSP,\nformatted in a paginated view. In order to do so, it is required to add the following search filters:\n- Creditor institution identifier: for filtering by specific organization\n- PSP identifier: for filtering by flow-related PSP\n- Flow name: for filtering by specific instance of the flow\n\nBefore executing the query, the search filters are validated against entities configured for\n<i>Nodo dei Pagamenti</i> environment, in particular on creditor institution and PSP. Also,\nthe name of the flow is validated against a specific standard format.<br>\nThe result of the query is paginated and contains all the metadata needed for pagination purposes.<br>\n\n\n## Error codes:\nAPPLICATIVE CODE | HTTP CODE | MESSAGE\n- | - | -\n**FDR-2000** | 400 | PSP with ID [%] is invalid or unknown.\n**FDR-2001** | 400 | PSP with ID [%] is not enabled.\n**FDR-2008** | 400 | Creditor institution with ID [%] is invalid or unknown.\n**FDR-2009** | 400 | Creditor institution with ID [%] is not enabled.\n**FDR-3008** | 400 | Flow identifier [%] contains a date that is not compliant.\n**FDR-3009** | 400 | Flow identifier [%] contains a PSP ID that is not compliant.\n**FDR-3001** | 404 | Flow with ID [%] not found.\n\n\n## API properties:\nPROPERTY | VALUE\n- | -\n***Internal*** | N\n***External*** | Y\n***Synchronous*** | Synchronous\n***Authorization*** | Y (Authorizer)\n***Authentication*** | Y (Subscription Key)\n***TPS*** | 1.0/sec\n***Idempotency*** | Y\n***Stateless*** | Y\n***Read/Write Intensive*** | Read\n***Cacheable*** | Y\n",
        "operationId": "IPspsController_getPaymentsForFlowNotInPublishedStatus",
        "tags": [
          "PSP"
        ],
        "parameters": [
          {
            "description": "The flow name, used as a search filter",
            "example": "2025-01-0188888888888-0001",
            "name": "fdr",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The creditor institution identifier, used as a search filter",
            "example": "15376371009",
            "name": "organizationId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The PSP identifier, used as a search filter",
            "example": "88888888888",
            "name": "pspId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The index of the page to be shown in the result",
            "example": 1,
            "name": "page",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int64",
              "default": 1,
              "minimum": 1
            }
          },
          {
            "description": "The number of the elements of the page to be shown in the result",
            "example": 50,
            "name": "size",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int64",
              "default": 1000,
              "minimum": 1
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedPaymentsResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "example": {
                  "httpStatusCode": 400,
                  "httpStatusDescription": "Bad Request",
                  "appErrorCode": "FDR-XXXX",
                  "errors": [
                    {
                      "path": "<detail.path.if-exist>",
                      "message": "<detail.message>"
                    }
                  ]
                },
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "example": {
                  "httpStatusCode": 404,
                  "httpStatusDescription": "Not Found",
                  "appErrorCode": "FDR-XXXX",
                  "errors": [
                    {
                      "message": "<detail.message>"
                    }
                  ]
                },
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "example": {
                  "errorId": "50905466-1881-457b-b42f-fb7b2bfb1610",
                  "httpStatusCode": 500,
                  "httpStatusDescription": "Internal Server Error",
                  "appErrorCode": "FDR-0500",
                  "errors": [
                    {
                      "message": "An unexpected error has occurred. Please contact support."
                    }
                  ]
                },
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/psps/{pspId}/fdrs/{fdr}": {
      "delete": {
        "summary": "Delete an existing draft flow and all related payments",
        "description": "## Description:\nThis API permits to delete a draft flow and all the payments associated to it. The deletion process\nirreversibly removes the flow and all related payments, making it impossible to recover any data afterwards.\nThis procedure frees the draft for the flow with a specific identifier, enabling the generation of\na new revision from scratch.<br>\nPlease note that in order to remove an existing flow and all the related payments, the flow must\nexist and be in draft, i.e. not be in PUBLISHED status. A published flow cannot be removed at all and\ncan only be 'replaced' by the creation of a new revision of the same flow through the 'new flow creation'\nAPI, although the old revision will be present anyway.<br>\nBefore executing the operation, the request fields are validated against entities configured for\n<i>Nodo dei Pagamenti</i> environment, in particular on PSP.<br>\n\n\n## Error codes:\nAPPLICATIVE CODE | HTTP CODE | MESSAGE\n- | - | -\n**FDR-2000** | 400 | PSP with ID [%] is invalid or unknown.\n**FDR-2001** | 400 | PSP with ID [%] is not enabled.\n**FDR-3008** | 400 | Flow identifier [%] contains a date that is not compliant.\n**FDR-3009** | 400 | Flow identifier [%] contains a PSP ID that is not compliant.\n**FDR-3001** | 404 | Flow with ID [%] not found.\n\n\n## API properties:\nPROPERTY | VALUE\n- | -\n***Internal*** | N\n***External*** | Y\n***Synchronous*** | Synchronous\n***Authorization*** | Y (Authorizer)\n***Authentication*** | Y (Subscription Key)\n***TPS*** | 1.0/sec\n***Idempotency*** | N\n***Stateless*** | Y\n***Read/Write Intensive*** | Read and Write\n***Cacheable*** | N\n",
        "operationId": "IPspsController_deleteExistingFlow",
        "tags": [
          "PSP"
        ],
        "parameters": [
          {
            "description": "The flow name, used as a search filter",
            "example": "2025-01-0188888888888-0001",
            "name": "fdr",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The PSP identifier, used as a search filter",
            "example": "88888888888",
            "name": "pspId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "example": {
                  "httpStatusCode": 400,
                  "httpStatusDescription": "Bad Request",
                  "appErrorCode": "FDR-XXXX",
                  "errors": [
                    {
                      "path": "<detail.path.if-exist>",
                      "message": "<detail.message>"
                    }
                  ]
                },
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "example": {
                  "httpStatusCode": 404,
                  "httpStatusDescription": "Not Found",
                  "appErrorCode": "FDR-XXXX",
                  "errors": [
                    {
                      "message": "<detail.message>"
                    }
                  ]
                },
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "example": {
                  "errorId": "50905466-1881-457b-b42f-fb7b2bfb1610",
                  "httpStatusCode": 500,
                  "httpStatusDescription": "Internal Server Error",
                  "appErrorCode": "FDR-0500",
                  "errors": [
                    {
                      "message": "An unexpected error has occurred. Please contact support."
                    }
                  ]
                },
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Create a new flow structure",
        "description": "## Description:\nThis API permits to generate a new flow for a specific creditor institution. The generated flow\nis only a structure that define the main fields and the guidelines related to the payments that\nmust be added in the next operations.<br>\nThe flow can only be created if no other flow exists in the CREATED or INSERTED state with the\nsame identifier. If it is necessary to define a new version but you have a flow in the listed statuses,\nyou must first publish the flow in draft status, or delete the flow completely via the API if you want\nto change it in its entirety.<br>\nBefore executing the operation, the request fields are validated against entities configured for\n<i>Nodo dei Pagamenti</i> environment, in particular (but not limited) on creditor institution\nand PSP. Also, the name of the flow is validated against a specific standard format.<br>\n\n\n## Error codes:\nAPPLICATIVE CODE | HTTP CODE | MESSAGE\n- | - | -\n**FDR-2000** | 400 | PSP with ID [%] is invalid or unknown.\n**FDR-2001** | 400 | PSP with ID [%] is not enabled.\n**FDR-3002** | 400 | Flow with ID [%] already exists with [%] status.\n**FDR-2002** | 400 | PSP Broker with ID [%] is invalid or unknown.\n**FDR-2003** | 400 | PSP Broker with ID [%] is not enabled.\n**FDR-2004** | 400 | Channel with ID [%] is invalid or unknown.\n**FDR-2005** | 400 | Channel with ID [%] is not enabled.\n**FDR-2006** | 400 | Channel with ID [%] is not authorized to be used with PSP Broker with ID [%].\n**FDR-2007** | 400 | Channel with ID [%] is not authorized to be used with PSP with ID [%].\n**FDR-2008** | 400 | Creditor institution with ID [%] is invalid or unknown.\n**FDR-2009** | 400 | Creditor institution with ID [%] is not enabled.\n**FDR-3008** | 400 | Flow identifier [%] contains a date that is not compliant.\n**FDR-3009** | 400 | Flow identifier [%] contains a PSP ID that is not compliant.\n**FDR-3004** | 400 | Flow with ID [%] have field sender.pspId [%] that does not match with query param [%].\n**FDR-3010** | 400 | Field fdr [%] does not match with query param [%].\n\n\n## API properties:\nPROPERTY | VALUE\n- | -\n***Internal*** | N\n***External*** | Y\n***Synchronous*** | Synchronous\n***Authorization*** | Y (Authorizer)\n***Authentication*** | Y (Subscription Key)\n***TPS*** | 1.0/sec\n***Idempotency*** | N\n***Stateless*** | Y\n***Read/Write Intensive*** | Write\n***Cacheable*** | N\n",
        "operationId": "IPspsController_createEmptyFlow",
        "tags": [
          "PSP"
        ],
        "parameters": [
          {
            "description": "The flow name, used as a search filter",
            "example": "2025-01-0188888888888-0001",
            "name": "fdr",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "[a-zA-Z0-9\\-_]{1,35}"
            }
          },
          {
            "description": "The PSP identifier, used as a search filter",
            "example": "88888888888",
            "name": "pspId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateFlowRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "example": {
                  "httpStatusCode": 400,
                  "httpStatusDescription": "Bad Request",
                  "appErrorCode": "FDR-XXXX",
                  "errors": [
                    {
                      "path": "<detail.path.if-exist>",
                      "message": "<detail.message>"
                    }
                  ]
                },
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "example": {
                  "httpStatusCode": 404,
                  "httpStatusDescription": "Not Found",
                  "appErrorCode": "FDR-XXXX",
                  "errors": [
                    {
                      "message": "<detail.message>"
                    }
                  ]
                },
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "example": {
                  "errorId": "50905466-1881-457b-b42f-fb7b2bfb1610",
                  "httpStatusCode": 500,
                  "httpStatusDescription": "Internal Server Error",
                  "appErrorCode": "FDR-0500",
                  "errors": [
                    {
                      "message": "An unexpected error has occurred. Please contact support."
                    }
                  ]
                },
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/psps/{pspId}/fdrs/{fdr}/payments/add": {
      "put": {
        "summary": "Add one or more payments to an existing flow",
        "description": "## Description:\nThis API permits to add one or more payments to a given flow, previously created through\nthe dedicated API. Newly added payments will be validated according to the indexes defined\nduring the insertion process and according to the totality of the indexes of the payments\nalready inserted in the same flow.<br>\nIn addition, during the process of adding payments the relevant flow is updated, in particular\nby adjusting the ‘computed values’: these fields will include the updated count of the inserted\npayments and the total amount of payments added together.<br>\nPlease note that in order to add a new payment, the flow must exist and be in draft, i.e.\nnot be in PUBLISHED status. In order to add a payment to an already published flow, it is necessary\nto create a new revision of the same flow through the 'new flow creation' API.<br>\nBefore executing the operation, the request fields are validated against entities configured for\n<i>Nodo dei Pagamenti</i> environment, in particular on PSP. Also, the name of the flow is validated\nagainst a specific standard format.<br>\n\n\n## Error codes:\nAPPLICATIVE CODE | HTTP CODE | MESSAGE\n- | - | -\n**FDR-2000** | 400 | PSP with ID [%] is invalid or unknown.\n**FDR-2001** | 400 | PSP with ID [%] is not enabled.\n**FDR-3008** | 400 | Flow identifier [%] contains a date that is not compliant.\n**FDR-3009** | 400 | Flow identifier [%] contains a PSP ID that is not compliant.\n**FDR-3005** | 400 | There are one or more identical payment indexes in same request for flow with ID [%].\n**FDR-3001** | 404 | Flow with ID [%] not found.\n**FDR-3006** | 400 | One or more payment index already added on flow with ID [%].\n\n\n## API properties:\nPROPERTY | VALUE\n- | -\n***Internal*** | N\n***External*** | Y\n***Synchronous*** | Synchronous\n***Authorization*** | Y (Authorizer)\n***Authentication*** | Y (Subscription Key)\n***TPS*** | 1.0/sec\n***Idempotency*** | N\n***Stateless*** | Y\n***Read/Write Intensive*** | Write\n***Cacheable*** | N\n",
        "operationId": "IPspsController_addPaymentToExistingFlow",
        "tags": [
          "PSP"
        ],
        "parameters": [
          {
            "description": "The flow name, used as a search filter",
            "example": "2025-01-0188888888888-0001",
            "name": "fdr",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The PSP identifier, used as a search filter",
            "example": "88888888888",
            "name": "pspId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AddPaymentRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "example": {
                  "httpStatusCode": 400,
                  "httpStatusDescription": "Bad Request",
                  "appErrorCode": "FDR-XXXX",
                  "errors": [
                    {
                      "path": "<detail.path.if-exist>",
                      "message": "<detail.message>"
                    }
                  ]
                },
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "example": {
                  "httpStatusCode": 404,
                  "httpStatusDescription": "Not Found",
                  "appErrorCode": "FDR-XXXX",
                  "errors": [
                    {
                      "message": "<detail.message>"
                    }
                  ]
                },
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "example": {
                  "errorId": "50905466-1881-457b-b42f-fb7b2bfb1610",
                  "httpStatusCode": 500,
                  "httpStatusDescription": "Internal Server Error",
                  "appErrorCode": "FDR-0500",
                  "errors": [
                    {
                      "message": "An unexpected error has occurred. Please contact support."
                    }
                  ]
                },
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/psps/{pspId}/fdrs/{fdr}/payments/del": {
      "put": {
        "summary": "Delete one or more payments from an existing flow",
        "description": "## Description:\nThis API permits to remove one or more payments from a particular flow, which were\npreviously added via the dedicated API. The payments to be removed are indicated in the request\nvia the index with which they were previously defined when they were added to the flow,\nand must all be present within the flow at the time of deletion.<br>\nIn addition, during the process of removing payments the relevant flow is updated, in particular\nby adjusting the ‘computed fields’: these fields will include the updated count of the removed\npayments and the total amount of payments reduced by the amounts of the removed payments.<br>\nPlease note that in order to remove an existing payment, the flow must exist and be in draft,\ni.e. not be in PUBLISHED status. In order to remove a payment from a flow that has already been\npublished, it is necessary to create a new revision of the same flow through the 'new flow creation' API\nnot including the affected payments.<br>\nBefore executing the operation, the request fields are validated against entities configured for\n<i>Nodo dei Pagamenti</i> environment, in particular on PSP.<br>\n\n\n## Error codes:\nAPPLICATIVE CODE | HTTP CODE | MESSAGE\n- | - | -\n**FDR-2000** | 400 | PSP with ID [%] is invalid or unknown.\n**FDR-2001** | 400 | PSP with ID [%] is not enabled.\n**FDR-3008** | 400 | Flow identifier [%] contains a date that is not compliant.\n**FDR-3009** | 400 | Flow identifier [%] contains a PSP ID that is not compliant.\n**FDR-3005** | 400 | There are one or more identical payment indexes in same request for flow with ID [%].\n**FDR-3001** | 404 | Flow with ID [%] not found.\n**FDR-3003** | 400 | Flow with ID [%] exists with [%] status.\n**FDR-3007** | 400 | Index of payment not match with index loaded on flow with ID [%].\n\n\n## API properties:\nPROPERTY | VALUE\n- | -\n***Internal*** | N\n***External*** | Y\n***Synchronous*** | Synchronous\n***Authorization*** | Y (Authorizer)\n***Authentication*** | Y (Subscription Key)\n***TPS*** | 1.0/sec\n***Idempotency*** | N\n***Stateless*** | Y\n***Read/Write Intensive*** | Write\n***Cacheable*** | N\n",
        "operationId": "IPspsController_deletePaymentFromExistingFlow",
        "tags": [
          "PSP"
        ],
        "parameters": [
          {
            "description": "The flow name, used as a search filter",
            "example": "2025-01-0188888888888-0001",
            "name": "fdr",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The PSP identifier, used as a search filter",
            "example": "88888888888",
            "name": "pspId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DeletePaymentRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "example": {
                  "httpStatusCode": 400,
                  "httpStatusDescription": "Bad Request",
                  "appErrorCode": "FDR-XXXX",
                  "errors": [
                    {
                      "path": "<detail.path.if-exist>",
                      "message": "<detail.message>"
                    }
                  ]
                },
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "example": {
                  "httpStatusCode": 404,
                  "httpStatusDescription": "Not Found",
                  "appErrorCode": "FDR-XXXX",
                  "errors": [
                    {
                      "message": "<detail.message>"
                    }
                  ]
                },
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "example": {
                  "errorId": "50905466-1881-457b-b42f-fb7b2bfb1610",
                  "httpStatusCode": 500,
                  "httpStatusDescription": "Internal Server Error",
                  "appErrorCode": "FDR-0500",
                  "errors": [
                    {
                      "message": "An unexpected error has occurred. Please contact support."
                    }
                  ]
                },
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/psps/{pspId}/fdrs/{fdr}/publish": {
      "post": {
        "summary": "Publish an existing flow in draft status",
        "description": "## Description:\nThis API permits to publish a flow in draft, completed and ready to be retrieved by\nthe creditor institution related to the flow. The publication release a new revision of\ncertain flow, permitting to generate a new version if required. After publication,\nspecific metadata are saved in order to perform an asynchronous historicization of this\nflow, including all the payments related to it.<br>\nIn addition, during the flow publication process a final validation of the \"computed fields\" is performed,\nchecking that their values are equal to the values pre-defined in the creation phase of the empty flow.\nPlease note that, in order to publish a flow, it must be in draft, so it must not be already in PUBLISHED status.<br>\nBefore executing the operation, the request fields are validated against entities configured for\n<i>Nodo dei Pagamenti</i> environment, in particular on PSP.<br>\n\n\n## Error codes:\nAPPLICATIVE CODE | HTTP CODE | MESSAGE\n- | - | -\n**FDR-2000** | 400 | PSP with ID [%] is invalid or unknown.\n**FDR-2001** | 400 | PSP with ID [%] is not enabled.\n**FDR-3008** | 400 | Flow identifier [%] contains a date that is not compliant.\n**FDR-3009** | 400 | Flow identifier [%] contains a PSP ID that is not compliant.\n**FDR-3001** | 404 | Flow with ID [%] not found.\n**FDR-3003** | 400 | Flow with ID [%] exists with [%] status.\n**FDR-4001** | 400 | On flow with ID [%], [%] payments were defined to be added but [%] were actually added.\n**FDR-4002** | 400 | On flow with ID [%], an amount of [%] euro for all payments were defined to be added but [%] is actually calculated.\n\n\n## API properties:\nPROPERTY | VALUE\n- | -\n***Internal*** | N\n***External*** | Y\n***Synchronous*** | Synchronous\n***Authorization*** | Y (Authorizer)\n***Authentication*** | Y (Subscription Key)\n***TPS*** | 1.0/sec\n***Idempotency*** | N\n***Stateless*** | Y\n***Read/Write Intensive*** | Write\n***Cacheable*** | N\n",
        "operationId": "IPspsController_publishFlow",
        "tags": [
          "PSP"
        ],
        "parameters": [
          {
            "description": "The flow name, used as a search filter",
            "example": "2025-01-0188888888888-0001",
            "name": "fdr",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The PSP identifier, used as a search filter",
            "example": "88888888888",
            "name": "pspId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "example": {
                  "httpStatusCode": 400,
                  "httpStatusDescription": "Bad Request",
                  "appErrorCode": "FDR-XXXX",
                  "errors": [
                    {
                      "path": "<detail.path.if-exist>",
                      "message": "<detail.message>"
                    }
                  ]
                },
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "example": {
                  "httpStatusCode": 404,
                  "httpStatusDescription": "Not Found",
                  "appErrorCode": "FDR-XXXX",
                  "errors": [
                    {
                      "message": "<detail.message>"
                    }
                  ]
                },
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "example": {
                  "errorId": "50905466-1881-457b-b42f-fb7b2bfb1610",
                  "httpStatusCode": 500,
                  "httpStatusDescription": "Internal Server Error",
                  "appErrorCode": "FDR-0500",
                  "errors": [
                    {
                      "message": "An unexpected error has occurred. Please contact support."
                    }
                  ]
                },
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/psps/{pspId}/published": {
      "get": {
        "summary": "Get all published flow related to the PSP",
        "description": "## Description:\nThis API permits to search all published flows for a specific PSP, formatted in a paginated view.\nThe search can be enhanced including the creditor institution identifier in order to filter only the flows\nfor certain receiver. The only flows retrieved are the latest revision, as same as \"nodoChiediElencoFlussiRendicontazione\"\nprimitive does.<br>\nBefore executing the query, the search filters are validated against entities configured for\n<i>Nodo dei Pagamenti</i> environment, in particular on PSP and creditor institution (if that\nsearch filter is defined).<br>\nThe result of the query is paginated and contains all the metadata needed for pagination purposes.<br>\n\n\n## Error codes:\nAPPLICATIVE CODE | HTTP CODE | MESSAGE\n- | - | -\n**FDR-2000** | 400 | PSP with ID [%] is invalid or unknown.\n**FDR-2001** | 400 | PSP with ID [%] is not enabled.\n**FDR-2008** | 400 | Creditor institution with ID [%] is invalid or unknown.\n**FDR-2009** | 400 | Creditor institution with ID [%] is not enabled.\n\n\n## API properties:\nPROPERTY | VALUE\n- | -\n***Internal*** | N\n***External*** | Y\n***Synchronous*** | Synchronous\n***Authorization*** | Y (Authorizer)\n***Authentication*** | Y (Subscription Key)\n***TPS*** | 1.0/sec\n***Idempotency*** | Y\n***Stateless*** | Y\n***Read/Write Intensive*** | Read\n***Cacheable*** | Y\n",
        "operationId": "IPspsController_getAllFlowsInPublishedStatus",
        "tags": [
          "PSP"
        ],
        "parameters": [
          {
            "description": "The PSP identifier, used as a search filter",
            "example": "88888888888",
            "name": "pspId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The creditor institution identifier, used as a search filter",
            "example": "15376371009",
            "name": "organizationId",
            "in": "query",
            "schema": {
              "type": "string",
              "pattern": "^(.{1,35})$"
            }
          },
          {
            "description": "The index of the page to be shown in the result",
            "example": 1,
            "name": "page",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int64",
              "default": 1,
              "minimum": 1
            }
          },
          {
            "description": "A date to be used as a lower limit search on publication date. In format ISO-8601 (yyyy-MM-dd'T'HH:mm:ss)",
            "example": "2025-01-01T12:00:00Z",
            "name": "publishedGt",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/Instant"
            }
          },
          {
            "description": "The number of the elements of the page to be shown in the result",
            "example": 50,
            "name": "size",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int64",
              "default": 1000,
              "minimum": 1
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedFlowsPublishedResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "example": {
                  "httpStatusCode": 400,
                  "httpStatusDescription": "Bad Request",
                  "appErrorCode": "FDR-XXXX",
                  "errors": [
                    {
                      "path": "<detail.path.if-exist>",
                      "message": "<detail.message>"
                    }
                  ]
                },
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "example": {
                  "httpStatusCode": 404,
                  "httpStatusDescription": "Not Found",
                  "appErrorCode": "FDR-XXXX",
                  "errors": [
                    {
                      "message": "<detail.message>"
                    }
                  ]
                },
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "example": {
                  "errorId": "50905466-1881-457b-b42f-fb7b2bfb1610",
                  "httpStatusCode": 500,
                  "httpStatusDescription": "Internal Server Error",
                  "appErrorCode": "FDR-0500",
                  "errors": [
                    {
                      "message": "An unexpected error has occurred. Please contact support."
                    }
                  ]
                },
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/psps/{pspId}/published/fdrs/{fdr}/revisions/{revision}/organizations/{organizationId}": {
      "get": {
        "summary": "Get single published flow related to the PSP, searching by name and revision",
        "description": "## Description:\nThis API permits to search a single published flow for a specific PSP.\nIn order to do so, it is required to add the following search filters:\n- Creditor institution identifier: for filtering by specific organization\n- PSP identifier: for filtering by flow-related PSP\n- Flow name: for filtering by specific instance of the flow\n- Revision: for filtering by flow revision\n\nThe result will contains a single element because there can be only one flow for each\nunique identifier and revision.<br>\nBefore executing the query, the search filters are validated against entities configured for\n<i>Nodo dei Pagamenti</i> environment, in particular on creditor institution and PSP. Also,\nthe name of the flow is validated against a specific standard format.<br>\n\n\n## Error codes:\nAPPLICATIVE CODE | HTTP CODE | MESSAGE\n- | - | -\n**FDR-2000** | 400 | PSP with ID [%] is invalid or unknown.\n**FDR-2001** | 400 | PSP with ID [%] is not enabled.\n**FDR-2008** | 400 | Creditor institution with ID [%] is invalid or unknown.\n**FDR-2009** | 400 | Creditor institution with ID [%] is not enabled.\n**FDR-3008** | 400 | Flow identifier [%] contains a date that is not compliant.\n**FDR-3009** | 400 | Flow identifier [%] contains a PSP ID that is not compliant.\n**FDR-3001** | 404 | Flow with ID [%] not found.\n\n\n## API properties:\nPROPERTY | VALUE\n- | -\n***Internal*** | N\n***External*** | Y\n***Synchronous*** | Synchronous\n***Authorization*** | Y (Authorizer)\n***Authentication*** | Y (Subscription Key)\n***TPS*** | 1.0/sec\n***Idempotency*** | Y\n***Stateless*** | Y\n***Read/Write Intensive*** | Read\n***Cacheable*** | Y\n",
        "operationId": "IPspsController_getSingleFlowInPublishedStatus",
        "tags": [
          "PSP"
        ],
        "parameters": [
          {
            "description": "The flow name, used as a search filter",
            "example": "2025-01-0188888888888-0001",
            "name": "fdr",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The creditor institution identifier, used as a search filter",
            "example": "15376371009",
            "name": "organizationId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The PSP identifier, used as a search filter",
            "example": "88888888888",
            "name": "pspId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The specific revision of the flow needed",
            "example": 1,
            "name": "revision",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SingleFlowResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "example": {
                  "httpStatusCode": 400,
                  "httpStatusDescription": "Bad Request",
                  "appErrorCode": "FDR-XXXX",
                  "errors": [
                    {
                      "path": "<detail.path.if-exist>",
                      "message": "<detail.message>"
                    }
                  ]
                },
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "example": {
                  "httpStatusCode": 404,
                  "httpStatusDescription": "Not Found",
                  "appErrorCode": "FDR-XXXX",
                  "errors": [
                    {
                      "message": "<detail.message>"
                    }
                  ]
                },
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "example": {
                  "errorId": "50905466-1881-457b-b42f-fb7b2bfb1610",
                  "httpStatusCode": 500,
                  "httpStatusDescription": "Internal Server Error",
                  "appErrorCode": "FDR-0500",
                  "errors": [
                    {
                      "message": "An unexpected error has occurred. Please contact support."
                    }
                  ]
                },
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/psps/{pspId}/published/fdrs/{fdr}/revisions/{revision}/organizations/{organizationId}/payments": {
      "get": {
        "summary": "Get payments of published flow related to the PSP, searching by name and revision",
        "description": "## Description:\nThis API permits to search all the payments of a single published flow for a specific PSP,\nformatted in a paginated view. In order to do so, it is required to add the following search filters:\n- Creditor institution identifier: for filtering by specific organization\n- PSP identifier: for filtering by flow-related PSP\n- Flow name: for filtering by specific instance of the flow\n- Revision: for filtering by flow revision\n\nBefore executing the query, the search filters are validated against entities configured for\n<i>Nodo dei Pagamenti</i> environment, in particular on creditor institution and PSP. Also,\nthe name of the flow is validated against a specific standard format.<br>\nThe result of the query is paginated and contains all the metadata needed for pagination purposes.<br>\n\n\n## Error codes:\nAPPLICATIVE CODE | HTTP CODE | MESSAGE\n- | - | -\n**FDR-2000** | 400 | PSP with ID [%] is invalid or unknown.\n**FDR-2001** | 400 | PSP with ID [%] is not enabled.\n**FDR-2008** | 400 | Creditor institution with ID [%] is invalid or unknown.\n**FDR-2009** | 400 | Creditor institution with ID [%] is not enabled.\n**FDR-3008** | 400 | Flow identifier [%] contains a date that is not compliant.\n**FDR-3009** | 400 | Flow identifier [%] contains a PSP ID that is not compliant.\n**FDR-3001** | 404 | Flow with ID [%] not found.\n\n\n## API properties:\nPROPERTY | VALUE\n- | -\n***Internal*** | N\n***External*** | Y\n***Synchronous*** | Synchronous\n***Authorization*** | Y (Authorizer)\n***Authentication*** | Y (Subscription Key)\n***TPS*** | 1.0/sec\n***Idempotency*** | Y\n***Stateless*** | Y\n***Read/Write Intensive*** | Read\n***Cacheable*** | Y\n",
        "operationId": "IPspsController_getPaymentsForFlowInPublishedStatus",
        "tags": [
          "PSP"
        ],
        "parameters": [
          {
            "description": "The flow name, used as a search filter",
            "example": "2025-01-0188888888888-0001",
            "name": "fdr",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The creditor institution identifier, used as a search filter",
            "example": "15376371009",
            "name": "organizationId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The PSP identifier, used as a search filter",
            "example": "88888888888",
            "name": "pspId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The specific revision of the flow needed",
            "example": 1,
            "name": "revision",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "description": "The index of the page to be shown in the result",
            "example": 1,
            "name": "page",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int64",
              "default": 1,
              "minimum": 1
            }
          },
          {
            "description": "The number of the elements of the page to be shown in the result",
            "example": 50,
            "name": "size",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int64",
              "default": 1000,
              "minimum": 1
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedPaymentsResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "example": {
                  "httpStatusCode": 400,
                  "httpStatusDescription": "Bad Request",
                  "appErrorCode": "FDR-XXXX",
                  "errors": [
                    {
                      "path": "<detail.path.if-exist>",
                      "message": "<detail.message>"
                    }
                  ]
                },
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "example": {
                  "httpStatusCode": 404,
                  "httpStatusDescription": "Not Found",
                  "appErrorCode": "FDR-XXXX",
                  "errors": [
                    {
                      "message": "<detail.message>"
                    }
                  ]
                },
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "example": {
                  "errorId": "50905466-1881-457b-b42f-fb7b2bfb1610",
                  "httpStatusCode": 500,
                  "httpStatusDescription": "Internal Server Error",
                  "appErrorCode": "FDR-0500",
                  "errors": [
                    {
                      "message": "An unexpected error has occurred. Please contact support."
                    }
                  ]
                },
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    }
  },
  "info": {
    "title": "FDR - Flussi di Rendicontazione",
    "description": "Manage FDR (aka \"Flussi di Rendicontazione\") exchanged between PSP and EC\n\n## OPERATIONAL ERROR CODES\n\n<details><summary>Details</summary>\nNAME | CODE | ERROR MESSAGE TEMPLATE | DESCRIPTION\n- | - | - | -\n**FDR-0500** | *ERROR* | An unexpected error has occurred. Please contact support. | An error occurred during computation. This could be <br>caused by an applicative error and it is probably required <br>to open an issue.\n**FDR-1000** | *BAD_REQUEST* | Bad request. | A generic 'Bad Request' error is occurred during request <br>validation.\n**FDR-1001** | *BAD_REQUEST_INPUT_JSON* | Bad request. Field [%] is equals to [%] but this is <br>not a valid value. | A generic error occurred during execution of request <br>syntactic validation\n**FDR-1002** | *BAD_REQUEST_INPUT_JSON_INSTANT* | Bad request. Field [%] is equals to [%] but it is expected <br>to be in ISO-8601 format [yyyy-MM-ddTHH:mm:ssZ] (example: <br>[2025-01-01T12:00:00.123000Z]. | An error occurred during execution of request syntactic <br>validation, in particular regarding the analysis of <br>date values\n**FDR-1003** | *BAD_REQUEST_INPUT_JSON_ENUM* | Bad request. Field [%] is equals to [%] but it is expected <br>to be one of the following values: [%]. | An error occurred during execution of request syntactic <br>validation, in particular regarding the analysis of <br>enumerative values\n**FDR-1004** | *BAD_REQUEST_INPUT_JSON_DESERIALIZE_<br>ERROR* | Bad request. Field [%] generate a deserialization error. <br>Please, set the correct value. | An error occurred during execution of deserialization <br>of request from a JSON string\n**FDR-1005** | *BAD_REQUEST_INPUT_JSON_NON_VALID_<br>FORMAT* | Bad request. The format of JSON request is not valid. | An error occurred during execution of analysis of JSON <br>request, in particular regarding its format\n**FDR-2000** | *PSP_UNKNOWN* | PSP with ID [%] is invalid or unknown. | An error occurred regarding the passed PSP identifier. <br>That PSP is not valid and maybe it does not exists <br>in current environment\n**FDR-2001** | *PSP_NOT_ENABLED* | PSP with ID [%] is not enabled. | An error occurred regarding the passed PSP identifier. <br>That PSP is not enabled and cannot be used for elaboration\n**FDR-2002** | *BROKER_UNKNOWN* | PSP Broker with ID [%] is invalid or unknown. | An error occurred regarding the passed PSP Broker identifier. <br>That PSP Broker is not valid and maybe it does not <br>exists in current environment\n**FDR-2003** | *BROKER_NOT_ENABLED* | PSP Broker with ID [%] is not enabled. | An error occurred regarding the passed PSP Broker identifier. <br>That PSP Broker is not enabled and cannot be used for <br>elaboration\n**FDR-2004** | *CHANNEL_UNKNOWN* | Channel with ID [%] is invalid or unknown. | An error occurred regarding the passed Channel identifier. <br>That Channel is not valid and maybe it does not exists <br>in current environment\n**FDR-2005** | *CHANNEL_NOT_ENABLED* | Channel with ID [%] is not enabled. | An error occurred regarding the passed Channel identifier. <br>That Channel is not enabled and cannot be used for <br>elaboration\n**FDR-2006** | *CHANNEL_BROKER_WRONG_CONFIG* | Channel with ID [%] is not authorized to be used with <br>PSP Broker with ID [%]. | An error occurred regarding the passed Channel identifier. <br>That Channel is not correctly configured for the passed <br>PSP Broker and cannot be used for elaboration. In order <br>to be used, it is required to be configured by PagoPA <br>operator\n**FDR-2007** | *CHANNEL_PSP_WRONG_CONFIG* | Channel with ID [%] is not authorized to be used with <br>PSP with ID [%]. | An error occurred regarding the passed Channel identifier. <br>That Channel is not correctly configured for the passed <br>PSP and cannot be used for elaboration. In order to <br>be used, it is required to be configured by PagoPA <br>operator\n**FDR-2008** | *EC_UNKNOWN* | Creditor institution with ID [%] is invalid or unknown. | An error occurred regarding the passed Creditor Institution <br>identifier. That Creditor Institution is not valid <br>and maybe it does not exists in current environment\n**FDR-2009** | *EC_NOT_ENABLED* | Creditor institution with ID [%] is not enabled. | An error occurred regarding the passed Creditor Institution <br>identifier. That Creditor Institution is not enabled <br>and cannot be used for elaboration\n**FDR-3001** | *REPORTING_FLOW_NOT_FOUND* | Flow with ID [%] not found. | An error occurred during the search of reporting flow. <br>The needed flow does not exists in current environment\n**FDR-3002** | *REPORTING_FLOW_ALREADY_EXIST* | Flow with ID [%] already exists with [%] status. | An error occurred during the search of reporting flow. <br>The flow being created already exists in CREATED/INSERTED <br>status and cannot be overridden. The existing flow <br>must be deleted in order to create another flow with <br>the same name.\n**FDR-3003** | *REPORTING_FLOW_WRONG_ACTION* | Flow with ID [%] exists with [%] status. | An error occurred during the search of reporting flow. <br>The flow being updated cannot be handled with some <br>kind of action (for example, trying to publish a flow <br>in CREATED status)\n**FDR-3004** | *REPORTING_FLOW_PSP_ID_NOT_MATCH* | Flow with ID [%] have field sender.pspId [%] that does <br>not match with query param [%]. | An error occurred during flow analysis. The value of <br>PSP identifier set on query parameter is not equals <br>to the one defined in the request. So, it is required <br>to update one of them in order to proceed.\n**FDR-3005** | *REPORTING_FLOW_PAYMENT_SAME_INDEX_<br>IN_SAME_REQUEST* | There are one or more identical payment indexes in <br>same request for flow with ID [%]. | An error occurred during flow analysis regarding the <br>included payments. In particular, there are at least <br>one index that is duplicated in the request and it <br>is required to delete them in order to proceed.\n**FDR-3006** | *REPORTING_FLOW_PAYMENT_DUPLICATE_<br>INDEX* | One or more payment index already added on flow with <br>ID [%]. | An error occurred during flow analysis regarding the <br>included payments. In particular, there are at least <br>one index that is duplicated in the whole flow and <br>it is required to exclude them in the request in order <br>to proceed.\n**FDR-3007** | *REPORTING_FLOW_PAYMENT_NO_MATCH_<br>INDEX* | Index of payment not match with index loaded on flow <br>with ID [%]. | An error occurred during flow analysis regarding the <br>included payments. In particular, there are at least <br>one index that does not exists in the whole flow it <br>is required to delete them from request in order to <br>proceed.\n**FDR-3008** | *REPORTING_FLOW_NAME_DATE_WRONG_<br>FORMAT* | Flow identifier [%] contains a date that is not compliant. | An error occurred during execution of analysis on flow <br>identifier. In particular, the date included in the <br>identifier is not correctly formatted and it is not <br>compliant with SANP specification\n**FDR-3009** | *REPORTING_FLOW_NAME_PSP_WRONG_FORMAT* | Flow identifier [%] contains a PSP ID that is not compliant. | An error occurred during execution of analysis on flow <br>identifier. In particular, the PSP Identifier included <br>in the flow identifier is not correct and it is not <br>compliant with SANP specification\n**FDR-3010** | *REPORTING_FLOW_NAME_NOT_MATCH* | Field fdr [%] does not match with query param [%]. | An error occurred during flow analysis. The value of <br>flow identifier set on query parameter is not equals <br>to the one defined in the request. So, it is required <br>to update one of them in order to proceed.\n**FDR-4001** | *REPORTING_FLOW_WRONG_TOT_PAYMENT* | On flow with ID [%], [%] payments were defined to be <br>added but [%] were actually added. | An error occurred during flow analysis before publish <br>operation. In particular, the number of total payments <br>added by previous steps are not equals to the quantity <br>pre-defined in flow during creation process.\n**FDR-4002** | *REPORTING_FLOW_WRONG_SUM_PAYMENT* | On flow with ID [%], an amount of [%] euro for all <br>payments were defined to be added but [%] is actually <br>calculated. | An error occurred during flow analysis before publish <br>operation. In particular, the number of total amout <br>for payments added by previous steps are not equals <br>to the quantity pre-defined in flow during creation <br>process.\n",
    "termsOfService": "https://www.pagopa.gov.it/",
    "version": "1.1.52-1-fix-interfaces"
  },
  "servers": [
    {
      "url": "${host}",
      "description": "Environment host"
    },
    {
      "url": "http://localhost:8080/",
      "description": "Localhost"
    }
  ]
}
