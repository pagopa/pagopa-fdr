
name: DB schema

on:
  workflow_call:
    inputs:
      environment:
        required: true
        description: The name of the environment target of the DB migration
        type: string
  workflow_dispatch:
    inputs:
      environment:
        required: true
        type: choice
        description: Select the Environment
        options:
          - dev
          - uat
          - prod

permissions:
  id-token: write
  contents: read

jobs:
  create_runner:
    name: Create Runner
    runs-on: ubuntu-22.04
    environment:
      name: ${{ inputs.environment }}
    outputs:
      runner_name: ${{ steps.create_github_runner.outputs.runner_name }}
    steps:
      - name: Create GitHub Runner
        id: create_github_runner
        # from https://github.com/pagopa/eng-github-actions-iac-template/tree/main/azure/github-self-hosted-runner-azure-create-action
        uses: pagopa/eng-github-actions-iac-template/azure/github-self-hosted-runner-azure-create-action@main
        with:
          client_id: ${{ secrets.CD_CLIENT_ID }}
          tenant_id: ${{ secrets.TENANT_ID }}
          subscription_id: ${{ secrets.SUBSCRIPTION_ID }}
          container_app_environment_name: ${{ vars.CONTAINER_APP_ENVIRONMENT_NAME }}
          resource_group_name: ${{ vars.CONTAINER_APP_ENVIRONMENT_RESOURCE_GROUP_NAME }} # RG of the runner
          pat_token: ${{ secrets.BOT_TOKEN_GITHUB }}
          self_hosted_runner_image_tag: "latest"

  db_schema:
    needs: [ create_runner ]
    runs-on: [ self-hosted, "${{ needs.create_runner.outputs.runner_name }}" ]
    name: DB migration
    environment: ${{ inputs.environment }}
    steps:
      - name: Checkout
        uses: actions/checkout@f43a0e5ff2bd294095638e18286ca9a3d1956744 # v3

      - name: Run DB schema
        shell: bash
        run: |
          create_schema () {
            SCHEMA=$1
            USER=$2
            PASS=$3
            az config set extension.use_dynamic_install=yes_without_prompt
            az postgres flexible-server execute --name ${{ vars.POSTGRES_DB_HOST }} --admin-user ${{ vars.POSTGRES_DB_ADMIN_USERNAME }} \
            --admin-password '${{ secrets.POSTGRES_DB_ADMIN_PASSWORD }}' --database-name "${{ vars.POSTGRES_DB_NAME }}" \
            --querytext "
            do \$\$
            BEGIN
            IF NOT EXISTS (SELECT FROM pg_catalog.pg_roles WHERE rolname = '$USER') THEN
            CREATE ROLE $USER LOGIN PASSWORD '$PASS';
            END IF;

            GRANT ALL PRIVILEGES ON DATABASE \"$DATABASE_NAME\" TO \"$USER\";
            GRANT \"$USER\" to $ADMIN_USERNAME;
            CREATE SCHEMA IF NOT EXISTS \"$SCHEMA\" AUTHORIZATION \"$USER\";
            END
            \$\$;
            "
          }

          create_schema "${{ vars.POSTGRES_DB_SCHEMA }}"     "${{ vars.POSTGRES_DB_USERNAME }}"     "${{ vars.POSTGRES_DB_PASSWORD }}"

  cleanup_runner:
    name: Cleanup Runner
    needs: [ create_runner, db_schema ]
    if: ${{ success() || failure() }}
    runs-on: ubuntu-22.04
    environment: ${{ inputs.environment }}
    steps:
      - name: Cleanup GitHub Runner
        id: cleanup_github_runner
        # from https://github.com/pagopa/eng-github-actions-iac-template/tree/main/azure/github-self-hosted-runner-azure-cleanup-action
        uses: pagopa/eng-github-actions-iac-template/azure/github-self-hosted-runner-azure-cleanup-action@0ee2f58fd46d10ac7f00bce4304b98db3dbdbe9a
        with:
          client_id: ${{ secrets.CD_CLIENT_ID }}
          tenant_id: ${{ secrets.TENANT_ID }}
          subscription_id: ${{ secrets.SUBSCRIPTION_ID }}
          resource_group_name: ${{ vars.CONTAINER_APP_ENVIRONMENT_RESOURCE_GROUP_NAME }}
          runner_name: ${{ needs.create_runner.outputs.runner_name }}
          pat_token: ${{ secrets.BOT_TOKEN_GITHUB }}
