
name: DB schema

on:
  workflow_call:
    inputs:
      environment:
        required: true
        description: The name of the environment target of the DB migration
        type: string
  workflow_dispatch:
    inputs:
      environment:
        required: true
        type: choice
        description: Select the Environment
        options:
          - dev
          - uat
          - prod

permissions:
  id-token: write
  contents: read

jobs:
  db_schema:
    runs-on: [ self-hosted-job, "${{ inputs.environment }}" ]
    name: DB schema
    environment: ${{ inputs.environment }}
    steps:
      - name: Checkout
        uses: actions/checkout@f43a0e5ff2bd294095638e18286ca9a3d1956744 # v3

      - name: Run DB schema
        shell: bash
        run: |
          create_schema () {
            SCHEMA=$1
            USER=$2
            PASS=$3
            az config set extension.dynamic_install_allow_preview=true
            az config set extension.use_dynamic_install=yes_without_prompt
            az postgres flexible-server execute --name ${{ vars.POSTGRES_DB_HOST }} --admin-user ${{ vars.POSTGRES_DB_ADMIN_USERNAME }} \
            --admin-password '${{ secrets.POSTGRES_DB_ADMIN_PASSWORD }}' --database-name "${{ vars.POSTGRES_DB_NAME }}" \
            --querytext "
            do \$\$
            BEGIN
            IF NOT EXISTS (SELECT FROM pg_catalog.pg_roles WHERE rolname = '$USER') THEN
            CREATE ROLE $USER LOGIN PASSWORD '$PASS';
            END IF;

            GRANT ALL PRIVILEGES ON DATABASE \"${{ vars.POSTGRES_DB_NAME }}\" TO \"$USER\";
            GRANT \"$USER\" to ${{ vars.POSTGRES_DB_ADMIN_USERNAME }};
            CREATE SCHEMA IF NOT EXISTS \"$SCHEMA\" AUTHORIZATION \"$USER\";
            END
            \$\$;
            "
          }

          create_schema "${{ vars.POSTGRES_DB_SCHEMA }}"     "${{ vars.POSTGRES_DB_USERNAME }}"     "${{ secrets.POSTGRES_DB_PASSWORD }}"
